#+TITLE: Config
#+OPTIONS: tex:t
#+export_file_name: /tmp/output.html

* Summary
The emacs config is written from scratch or should I say built ground up by copying from several sources listed under [[*Inspirations][Inspirations]] section.

* Inspirations
- https://blog.sumtypeofway.com/posts/emacs-config.html
- https://github.com/trev-dev/emacs
- https://github.com/daviwil/emacs-from-scratch
- https://github.com/daedreth/UncleDavesEmacs
- https://github.com/larstvei/dot-emacs#meta
- https://github.com/skx/dotfiles/blob/master/.emacs.d/init.md#org-mode-and-blank-lines
- https://zzamboni.org/post/my-emacs-configuration-with-commentary/
- https://miikanissi.com/blog/website-with-emacs/
- https://rgoswami.me/posts/org-note-workflow/#basic-variables
- https://github.com/sergeyklay/.emacs.d
- https://github.com/chongchonghe/emacs-dotfile

** Eyecandy
- https://lepisma.xyz/2017/10/28/ricing-org-mode/index.html

* Tips
- https://practical.li/spacemacs/alternative-tooling/org-easy-templates/
** Debug your config.org with =M-x org-lint=
- https://emacs.stackexchange.com/questions/63003/org-babel-tangle-error

* Emacs
#+begin_src emacs-lisp
  ;; -*- coding: utf-8; -*-
#+end_src

* TODO List
** TODO use vertico, consult, embark combo
- how to intergrate with org-ref
* Absolutely firsts
** Use package
From [[https://batsov.com/articles/2025/04/17/using-use-package-the-right-way/#fnref:3][Using use-package the right way - (think)]]
- =use-package= also comes with profiler, you can set =use-package-compute-statistics= to t, restart Emacs and call =use-package-report=  to see which packages are taking too much time to set up and what stage they’re at.
#+begin_src emacs-lisp
  ;;(setq use-package-compute-statistics t)
#+end_src

Use =macroexpand-1= like this inspect what is going on. There is also this [[macrostep]]
#+begin_src emacs-lisp :results  code
  (macroexpand-1
   '(use-package projectile))
#+end_src

<<macrostep>> [[https://github.com/emacsorphanage/macrostep][GitHub - emacsorphanage/macrostep: interactive macro-expander for Emacs]]
** Garbage Collection
[[https://qua.name/mrb/an-org-babel-based-emacs-configuration#org0f69a00][My org-babel based emacs configuration — MrBlog....]]
#+begin_src emacs-lisp
  (use-package gcmh
    :config
    (setq gcmh-verbose 1)
    (setq gcmh-high-cons-threshold (* 16 1024 1024 1024))
    (gcmh-mode 1))
#+end_src



** Hydra
#+begin_src emacs-lisp
  (use-package hydra
    :ensure t)
  (add-to-list 'load-path "~/emacs/vanilla.d/lisp")
#+end_src

* Package Management
** Use Package
#+begin_src emacs-lisp
  (setq use-package-always-ensure nil)
#+end_src
** Elpaca
#+begin_src emacs-lisp
(defvar elpaca-installer-version 0.11)
(defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil :depth 1 :inherit ignore
                              :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))
(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (<= emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                  ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                  ,@(when-let* ((depth (plist-get order :depth)))
                                                      (list (format "--depth=%d" depth) "--no-single-branch"))
                                                  ,(plist-get order :repo) ,repo))))
                  ((zerop (call-process "git" nil buffer t "checkout"
                                        (or (plist-get order :ref) "--"))))
                  (emacs (concat invocation-directory invocation-name))
                  ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                        "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                  ((require 'elpaca))
                  ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))
#+end_src

Enable =use-package= integration
#+begin_src emacs-lisp
  ;;(elpaca use-package :elpaca t)
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode))
  ;; Assume :elpaca t unless otherwise specified.
  (setq elpaca-use-package-by-default t)
  (elpaca-wait)
#+end_src

** COMMENT straight.el
[[https://github.com/radian-software/straight.el#getting-started][Getting started with straight.el]], there are variables that can be set to customize straight.el but must be set before the following.

*** Bootstrapping code
#+begin_src emacs-lisp
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           emacs	      "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))
#+end_src

* Open this =config.org= file
Functions to open some list of standard files quickly, like =config.org=, =w.org=, =elfeed.org=
Find this config file
#+begin_src emacs-lisp
  (defun find-config-file ()
    (interactive)
    (find-file "~/emacs/vanilla.d/config.org"))
  (global-set-key (kbd "C-c e e") 'find-config-file)
#+end_src

Reload the config.org
#+begin_src emacs-lisp
  (defun reload-config ()
    "Reloads this config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/emacs/vanilla.d/config.org")))
  (global-set-key (kbd "C-c e r") 'reload-config)
#+end_src

Hydra menu for opening the files. Add more files to the menu and you can open them quickly using the keybinding below, =M-o=
#+begin_src emacs-lisp
  (defhydra hydra-open-stdfiles  (:color "pink")
    "Open File"
    ("w" (find-file "~/org/w.org") "Work Tasks")
    ("f" (find-file "~/emacs/elfeed-db/elfeed.org") "RSS Feeds")
    ("d" (find-file "~/org/downloads.org") "To Download")
    ("e" (find-file "~/emacs/vanilla.d/config.org") "Emacs Config"))

  (global-set-key (kbd "M-o") 'hydra-open-stdfiles/body)
#+end_src

* System Integration

Do not use system open file dialog boxes, use minibuffer instead
#+begin_src emacs-lisp
  (setq use-dialog-box nil)
#+end_src

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :config
    (when (memq window-system '(mac ns x))
      (exec-path-from-shell-initialize)))
#+end_src

#+begin_src emacs-lispsef
  (use-package org-alert
    :ensure nil
    :custom
    (setq org-alert-interval 300
          org-alert-notify-cutoff 10 ;;in minutes
          org-alert-notify-after-event-cutoff 10)
    (setq alert-default-style 'libnotify)
    :init
    (org-alert-enable))
#+end_src

#+begin_src emacs-lisp
  (use-package proced
    :ensure nil
    :defer t
    :custom
    (proced-enable-color-flag t)
    (proced-tree-flag t))
#+end_src

** Save shell buffers to =~/logs=

#+begin_src emacs-lisp
  (unless (file-directory-p "~/logs")
    (make-directory "~/logs" t))

  (defvar-local va/shell-buffer-save-path nil
    "File path to save this shell buffer's content.")

  (defvar-local va/shell-buffer-auto-save-timer nil
    "Timer used to periodically auto-save this shell buffer.")

  (defun va/prompt-for-shell-buffer-save-path ()
    "Prompt the user to select a file path for saving this shell buffer."
    (let* ((default-name (format "~/logs/%s.log"
                                 (replace-regexp-in-string "[^a-zA-Z0-9]+" "-"
                                                           (buffer-name))))
           (chosen-file (read-file-name "Save shell buffer to file: " nil nil nil default-name)))
      (setq va/shell-buffer-save-path chosen-file)))

  (defun va/save-current-shell-buffer ()
    "Save the current shell buffer to its designated file. Ask path if needed."
    (interactive)
    (when (and (eq major-mode 'shell-mode)
               (not va/shell-buffer-save-path))
      (va/prompt-for-shell-buffer-save-path))
    (if (and (eq major-mode 'shell-mode)
             va/shell-buffer-save-path)
        (let ((contents (buffer-substring-no-properties (point-min) (point-max))))
          (with-temp-file va/shell-buffer-save-path
            (insert contents))
          (message "Shell buffer saved to %s" va/shell-buffer-save-path))
      (call-interactively #'save-buffer)))

  (defun va/start-shell-buffer-auto-save (interval)
    "Start auto-saving this shell buffer every INTERVAL seconds."
    (when va/shell-buffer-auto-save-timer
      (cancel-timer va/shell-buffer-auto-save-timer))
    (setq va/shell-buffer-auto-save-timer
          (run-with-timer interval interval
                          (lambda ()
                            (when (eq major-mode 'shell-mode)
                              (unless va/shell-buffer-save-path
                                (va/prompt-for-shell-buffer-save-path))
                              (when va/shell-buffer-save-path
                                (let ((contents (buffer-substring-no-properties (point-min) (point-max))))
                                  (with-temp-file va/shell-buffer-save-path
                                    (insert contents)))))))))

  (defun va/setup-shell-buffer-saving ()
    "Configure buffer-local save behavior in shell buffers."
    (local-set-key (kbd "C-x C-s") #'va/save-current-shell-buffer))

  (defun va/shell-auto-save-setup ()
    "Enable saving for shell buffer without prompting on launch."
    (when (eq major-mode 'shell-mode)
      (va/setup-shell-buffer-saving)
      (va/start-shell-buffer-auto-save 300))) ; Auto-save every 5 minutes

  (add-hook 'shell-mode-hook #'va/shell-auto-save-setup)

#+end_src


** Sudo edit
- [[https://stackoverflow.com/a/79137600/1685729][Open a file with su/sudo inside Emacs - Stack Overflow]]
#+begin_src emacs-lisp
  (defun er-sudo-edit (&optional arg)
    "Edit currently visited file as root.

     With a prefix ARG prompt for a file to visit.
     Will also prompt for a file to visit if current
     buffer is not visiting a file."
    (interactive "P")
    (if (or arg (not buffer-file-name))
        (find-file (concat "/sudo:root@localhost:"
                           (read-file-name "Find file(as root): ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
#+end_src

** Multishell
#+begin_src emacs-lisp
  (use-package multishell
    :bind (("C-$" . #'multishell-pop-to-shell)))
#+end_src

** Multi Term
#+begin_src emacs-lisp
  (use-package multi-term
    :custom
    (multi-term-program "/bin/bash"))
#+end_src

** Eterm Color
#+begin_src emacs-lisp
  (use-package eterm-256color
    :hook (term-mode . eterm-256color-mode))
#+end_src

** SSH
Taken from [[https://blog.lambda.cx/posts/org-ssh-export/][How I Keep Track of My Servers - lambda.cx blog]]
#+begin_src emacs-lisp
  (defun org-ssh-connect (&optional arg)
    "Connect to the host at point and open `dired'.
  If ARG is non-nil, open `eshell' instead of `dired'."
    (interactive "P")
    (let* ((properties (org-entry-properties))
           (name (alist-get "ITEM" properties nil nil #'string=))
           (user (alist-get "SSH_USER" properties nil nil #'string=))
           (port (alist-get "SSH_PORT" properties nil nil #'string=))
           (host (or (alist-get "IP" properties nil nil #'string=)
                     (alist-get "HOSTNAME" properties nil nil #'string=))))
      (if host
          (let ((default-directory (format "/ssh:%s%s%s:"
                                           (if user (format "%s@" user) "")
                                           name
                                           (if port (format "#%s" port) ""))))
            (message "Connecting to %s..." name)
            (if arg
                (eshell t)
              (dired ".")))
        (user-error "Not an SSH host"))))
#+end_src

** Tramp
#+begin_src emacs-lisp
  (use-package tramp
    :ensure nil
    :custom
    (tramp-inline-compress-start-size 1000)
    (tramp-copy-size-limit 10000)
    (vc-handled-backends '(Git))
    (tramp-default-method "scp")
    (tramp-use-ssh-controlmaster-options nil)
    (tramp-verbose 1))
#+end_src

** Emacs Terminal Emulator Eat
#+begin_src emacs-lisp
  (use-package eat)
#+end_src
** Porcelain
*** Pandoc
#+begin_src emacs-lisp
  (use-package pandoc)

  (defun va/convert-and-kill--org-to-md ()
    "Convert the selected region in Org mode to Markdown using Pandoc and copy it to the clipboard."
    (interactive)
    (if (use-region-p)
        (let* ((region-text (buffer-substring-no-properties (region-beginning) (region-end)))
               (md-text (with-temp-buffer
                        (insert region-text)
                        (shell-command-on-region (point-min) (point-max) "pandoc -f org -t markdown" t t)
                        (buffer-string))))
          (kill-new md-text)
          (message "Copied converted Markdown to clipboard"))
      (message "No region selected")))

#+end_src

* Basic settings

** Remove startup welcome screen
The code block below toggle off the welcome startup screen.
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(inhibit-startup-screen t))
#+END_SRC
** Hide mode line
#+begin_src emacs-lisp
  (use-package hide-mode-line
    :defer
    :hook ((eshell-mode . hide-mode-line-mode)
           (vterm-mode . hide-mode-line-mode)
           (occur-mode . hide-mode-line-mode)
           (treemacs-mode . hide-mode-line-mode)))
#+end_src

** Minibuffer setup
#+begin_src emacs-lisp
  (add-hook 'minibuffer-setup-hook 'va-minibuffer-setup)
  (defun va-minibuffer-setup ()
    (set (make-local-variable 'face-remapping-alist)
         '((default :height 1.25))))
#+end_src

** Mini echo
#+begin_src emacs-lisp
  (use-package mini-echo
    :hook (after-init . mini-echo-mode))
#+end_src

** Debugging
#+BEGIN_SRC emacs-lisp
  ;; Profile emacs startup
  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "Emacs loaded in %s."
                       (emacs-init-time))))

  (setq debug-on-error nil)
  (setq find-file-visit-truename nil)
#+END_SRC
** Interface tweaks
*** Inhibit Startup Message
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (add-hook 'text-mode-hook 'turn-on-visual-line-mode)
  (add-hook 'org-mode-hook 'turn-on-visual-line-mode)

  (global-set-key [C-mouse-4] 'text-scale-increase)
  (global-set-key [C-mouse-5] 'text-scale-decrease)
#+END_SRC


*** Window Decorations
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode -1)
  (add-to-list 'default-frame-alist '(alpha 99 99))

  (when (window-system)
    (tool-bar-mode -1)
    (scroll-bar-mode -1)
    (tooltip-mode -1)
    (set-fringe-mode 5))

  (use-package all-the-icons
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :after all-the-icons
    :hook (dired-mode . all-the-icons-dired-mode))

  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))

  (use-package diminish
    :config (diminish 'eldoc-mode))

  (global-display-line-numbers-mode t)

  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  treemacs-mode-hook
                  eww-mode-hook
                  nov-mode-hook
                  pdf-view-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (defvar van/frame-transparency '(95 . 95))
  ;; Set frame transparency
  (set-frame-parameter (selected-frame) 'alpha van/frame-transparency)
  (add-to-list 'default-frame-alist `(alpha . ,van/frame-transparency))
  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+END_SRC

#+begin_src emacs-lisp
  ;; my very first own emacs-lisp functionality :)
  ;; for watching naruto underneath
  (defvar van/frame-opacity '95)
  (defun van/frame-opacity-increase ()
    (interactive)
    (if (< van/frame-opacity 100)
        (setq van/frame-opacity (+ van/frame-opacity 5)))
    (message "%s" van/frame-opacity)
    (set-frame-parameter (selected-frame) 'alpha (cons van/frame-opacity van/frame-opacity)))

  (defun van/frame-opacity-decrease ()
    (interactive)
    (if (> van/frame-opacity 30)
        (setq van/frame-opacity (- van/frame-opacity 5)))
    (message "%s" van/frame-opacity)
    (set-frame-parameter (selected-frame) 'alpha (cons van/frame-opacity van/frame-opacity)))

  (global-set-key (kbd "C-M-S-O") 'van/frame-opacity-increase)
  (global-set-key (kbd "C-M-o") 'van/frame-opacity-decrease)
#+end_src

*** Keycast mode
#+begin_src emacs-lisp
  (use-package keycast
    :defer
    :custom
    (keycast-mode-line-format "%k%c%R ")
    (keycast-substitute-alist
     '((keycast-log-erase-buffer nil nil)
       (transient-update         nil nil)
       (self-insert-command "." "Typing…")
       (org-self-insert-command "." "Typing…")
       (mwheel-scroll nil nil)
       (mouse-movement-p nil nil)
       (mouse-event-p nil nil))))
#+end_src

*** Dim Inactive Buffer
#+BEGIN_SRC emacs-lisp
  (use-package dimmer
    :custom (dimmer-fraction 0.2)
    :hook (after-init . dimmer-mode))
#+END_SRC

*** Pulsar
#+begin_src emacs-lisp
  (use-package pulsar
    :custom
    (pulsar-pulse t)
    (pulsar-delay 0.055)
    (pulsar-iterations 10)
    (pulsar-face 'pulsar-magenta)
    (pulsar-highlight-face 'pulsar-yellow)
    :hook (after-init . pulsar-global-mode))
#+end_src

*** Themes
There are several themes I have grown to like. Here is the some of them.
- [[https://github.com/kunalb/poet][poet]]
- bespoke
- afternoon
- lueven
- [[https://github.com/mauforonda/emacs][mauforonda]]
**** Fonts
***** Notes
- [[https://gist.github.com/equwal/89b1ef5ac8d4d737cfd37f66e9ba4895][Selecting and trying out different fonts in Emacs -- equwal/fonts.el]]
- [[https://protesilaos.com/codelog/2022-05-14-re-emacs-font/][Protesilaos Stavrou]]
- [[https://github.com/be5invis/Iosevka#manual-installation][GitHub - be5invis/Iosevka: Versatile typeface for code, from code.]]
***** Variable Pitch Mode
#+begin_src emacs-lisp
  (dolist (hook '(erc-mode-hook
                  LaTeX-mode-hook
                  org-mode-hook
                  edit-server-start-hook
                  markdown-mode-hook))
    (add-hook hook (lambda () (variable-pitch-mode t))))
#+end_src

***** Mixed Pitch Fonts
#+begin_src emacs-lisp
  (use-package mixed-pitch
    :defer
    :custom
    (mixed-pitch-variable-pitch-cursor nil)
    :hook
    (org-mode . mixed-pitch-mode)
    (text-mode . mixed-pitch-mode))
#+end_src

***** COMMENT Font Cycling
****** [[https://comp.lang.lisp.narkive.com/gVFOnOLz/best-unicode-font-for-emacs-font-cycling-elisp-code][best unicode font for emacs & font cycling elisp code]] -- xah lee
*******  Quickly Switching Fonts
When coding in Python or viewing directories, mono-spaced font is necessary. However, proportional font works great in coding too. Try it. You may be surprised.
Proportional font is easier to read, and shows more characters per line. I got used to using proportional fonts for html, xml, perl, lisp...
One problem is that it is difficult to switch font in emacs. Here's a elisp code that cycle fonts.

#+begin_src emacs-lisp
  (defun cycle-font ()
    "Change font in current frame. When called repeatedly, cycle thru a predefined set of fonts. Warning: tested on Windows Vista only."
    (interactive)

    (let (fontList fontToUse currentState)
      ;; states starts from 1.
      (setq fontList (font-family-list))
      ;;(setq fontList (list "Courier New-10" "Arial Unicode MS-10" "Unifont-12" "FixedsysTTF-11" "Code2000-11" "Lucida Sans Unicode-10"))
      (setq currentState (if (get this-command 'state)
                             (get this-command 'state) 1))
      (setq fontToUse (nth (1- currentState) fontList))

      (set-frame-parameter nil 'font fontToUse)
      (message "Current font is: %s" fontToUse)
      (put this-command 'state (1+ (% currentState (length fontList))))
      (redraw-frame (selected-frame))))
#+end_src

Modify the line on fontList so that you can use this function to cycle  among the fonts of your choice. You can set a shortcut key like this:

#+begin_src emacs-lisp
  (global-set-key (kbd "<C-f9>") 'cycle-font) ; Ctrl+F9
#+end_src

(See: Defining Your Own Keyboard Shortcuts)

Also, if you are not using emacs 23, you probably should upgrade, because emacs 23 switched its internal char encoding to Unicode (utf-8), and has a new font engine that supports operating system's fonts and anti-aliasing. (see: New Features in Emacs 23)

**** COMMENT Install SF fonts
#+begin_src bash
  mkdir -p ~/.fonts
  git clone https://github.com/supercomputra/SF-Mono-Font /tmp/fonts
  cp /tmp/fonts/* ~/.fonts/
#+end_src

For Dejavu Fonts
From https://community.jaspersoft.com/wiki/configuring-jasperreports-server-use-dejavu-fonts
#+begin_src bash :dir /sudo::
  cd /tmp/
  wget http://sourceforge.net/projects/dejavu/files/dejavu/2.37/dejavu-fonts-ttf-2.37.tar.bz2
  tar -xf dejavu-fonts-ttf-2.37.tar.bz2
  mv dejavu-fonts-ttf-2.37/ttf/ /usr/share/fonts/dejavu
  fc-cache /usr/share/fonts/dejavu
#+end_src

#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "Iosevka Medium" :height 140)
#+end_src

#+RESULTS:

For Iosevka fonts
#+begin_src bash
  curl -s 'https://api.github.com/repos/be5invis/Iosevka/releases/latest' | jq -r ".assets[] | .browser_download_url" | grep PkgTTC-Iosevka | xargs -n 1 curl -L -O --fail --silent --show-error
#+end_src


**** COMMENT Bespoke Theme
Download theme
#+begin_src bash
  cd ~/aalar/emacs/vanilla.d/themes/
  git clone https://github.com/mclear-tools/bespoke-themes
#+end_src

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/emacs/vanilla.d/themes/")
  ;;(load-theme 'afternoon t)
  (load-file "~/emacs/vanilla.d/themes/bespoke-themes/bespoke-themes.el")
  (load-file "~/emacs/vanilla.d/themes/bespoke-themes/bespoke-theme.el")
  (setq bespoke-set-evil-cursors t)
  ;; Set use of italics
  (setq bespoke-set-italic-comments t
        bespoke-set-italic-keywords t)
  ;; Set variable pitch
  (setq bespoke-set-variable-pitch t)
  ;; Set initial theme variant
  (setq bespoke-set-theme 'light)
  (load-theme 'bespoke t)
#+END_SRC

****  COMMENT Solarized Theme
#+begin_src emacs-lisp
  (use-package solarized-theme
    :init
    (load-theme 'solarized-light t))
#+end_src

**** ef-themes
#+begin_src emacs-lisp
  (use-package ef-themes
    :init
    (load-theme 'ef-cyprus t))
#+end_src

**** Frame and Window configuration
Where did I steal this from?
#+begin_src emacs-lisp
  ;; Make a clean & minimalist frame
  (use-package frame
    :ensure nil
    :config
    (setq-default default-frame-alist
                  (append (list
                           '(font . "Iosevka Fixed:style=medium:size=20") ;; NOTE: substitute whatever font you prefer here
                           '(internal-border-width . 10)
                           '(left-fringe    . 0)
                           '(right-fringe   . 0)
                           '(tool-bar-lines . 0)
                           '(menu-bar-lines . 0)
                           '(vertical-scroll-bars . nil))))
    (setq-default window-resize-pixelwise t)
    (setq-default frame-resize-pixelwise t)
    :custom
    (window-divider-default-right-width 12)
    (window-divider-default-bottom-width 1)
    (window-divider-default-places 'right-only)
    (window-divider-mode nil))

  (add-hook 'before-make-frame-hook 'window-divider-mode)
#+end_src

**** COMMENT Use =use-package= to install and load theme
#+begin_src emacs-lisp
  (use-package ample-theme
    :init (progn (load-theme 'ample t t)
                 (load-theme 'ample-flat t t)
                 (load-theme 'ample-light t t)
                 (enable-theme 'ample))
    :defer t)
#+end_src

**** COMMENT Customize theme after loading theme
#+begin_src emacs-lisp
  (with-eval-after-load "ample-theme"
    ;; add one of these blocks for each of the themes you want to customize
    (custom-theme-set-faces
     'ample
     ;; this will overwride the color of strings just for ample-theme
     '(font-lock-string-face ((t (:foreground "#bdba81"))))))
#+end_src

*** Paren matching
#+BEGIN_SRC emacs-lisp
  (use-package smartparens-config
    :ensure smartparens
    :config
    (progn
      ;; (sp-pair "\\\\(" . "\\\\)")      ;; emacs regexp parens
      ;; (sp-pair "\\\\{"   . "\\\\}")    ;; latex literal braces in    math mode
      ;; (sp-pair "\\("   . "\\)"  )      ;; capture parens in regexp in various languages
      ;; (sp-pair "\\\""  . "\\\"" )      ;; escaped quotes in strings
      ;; (sp-pair "\""    . "\""   )      ;; string double quotes
      ;; (sp-pair "'"     . "'"    )      ;; string single quotes/character quotes
      ;; (sp-pair "("     . ")"    )      ;; parens (yay lisp)
      ;; (sp-pair "["     . "]"    )      ;; brackets
      ;; (sp-pair "{"     . "}"    )      ;; braces (a.k.a. curly brackets)
      ;; (sp-pair "`"     . "`"    )      ;; latex strings. tap twice for latex double quotes
      (show-smartparens-global-mode t)
      (smartparens-global-mode t)))

  ;;(add-hook 'prog-mode-hook 'turn-on-smartparens-strict-mode)
  ;;(add-hook 'markdown-mode-hook 'turn-on-smartparens-strict-mode)
#+END_SRC

*** Marginalia
#+begin_src emacs-lisp
  (use-package marginalia
    :hook (after-init . marginalia-mode))
#+end_src

** Text Encoding
#+BEGIN_SRC emacs-lisp
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))
#+END_SRC

** Buffer Management
#+begin_src emacs-lisp
  (global-set-key "\C-x\ \C-b" 'ibuffer)
#+end_src

** Workspaces
*** Perspective
#+begin_src emacs-lisp
  (use-package perspective
    :bind
    ("C-x C-b" . persp-ibuffer)  ; or use a nicer switcher, see below
    :custom
    (persp-mode-prefix-key (kbd "M-P"))  ; pick your own prefix key here
    :init
    (persp-mode))
#+end_src

** Recent Files
#+BEGIN_SRC emacs-lisp
  (require 'recentf)
  (add-to-list 'recentf-exclude "\\elpa")
  (recentf-mode 1)
  (setq recentf-max-menu-items 25)
  (setq recentf-max-saved-items 25)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
  (run-at-time nil (* 5 60) 'recentf-save-list)
#+END_SRC

** Misc
#+BEGIN_SRC emacs-lisp
  (setq
   make-backup-files nil
   auto-save-default nil
   create-lockfiles nil)
#+END_SRC

** COMMENT Tabbed Interface
#+begin_src emacs-lisp
  (use-package centaur-tabs
    :hook
    (dired-mode . centaur-tabs-local-mode)
    :config
    (centaur-tabs-mode t)
    :bind
    ("C-<prior>" . centaur-tabs-backward)
    ("C-<next>" . centaur-tabs-forward))
#+end_src

** Try
#+BEGIN_SRC emacs-lisp
  (use-package try)
#+END_SRC

** Which Key
Brings up some help
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :hook (after-init . which-key-mode)
    :config (which-key-setup-side-window-bottom)
    :custom (which-key-idle-delay 1.2))
#+END_SRC

** Helpful
#+begin_src emacs-lisp
  (use-package helpful
    :bind
    ([remap describe-function] . helpful-callable)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . helpful-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Command log mode
#+begin_src emacs-lisp
  (use-package command-log-mode)
#+end_src


** Clipetty
Clipetty is a minor mode for terminal (TTY) users that sends text that you kill in Emacs to your Operating System's clipboard. If you predominately use Emacs in GUI (X-Windows, macOS, Windows) frames you don't need Clipetty.

For this to work you need to be using a terminal emulator that supports OSC 52 escape sequences. See the Terminals section below to check if your favorite terminal emulator is on the list.

#+begin_src emacs-lisp
  (use-package clipetty
    :hook (after-init . global-clipetty-mode))
#+end_src

** Highlight TODO
Highlight TODO and similar keywords in comments and strings.
Look into this for starting emacs extension development
#+begin_src emacs-lisp
  (use-package hl-todo
    :custom  (hl-todo-keyword-faces
              '(("TODO"   . "#FF0000")
                ("FIXME"  . "#FF0000")
                ("DEBUG"  . "#A020F0")
                ("GOTCHA" . "#FF4500")
                ("STUB"   . "#1E90FF")))
    :hook (prog-mode . hl-todo-mode))

  (define-globalized-minor-mode va-global-hl-line-mode hl-line-mode
    (lambda () (hl-line-mode 1)))

  (va-global-hl-line-mode 1)
#+end_src

** Anzu
#+begin_src emacs-lisp
  (use-package anzu
    :config
    (require 'anzu)
    (global-anzu-mode +1)

    (set-face-attribute 'anzu-mode-line nil
                        :foreground "yellow" :weight 'bold)

    (custom-set-variables
     '(anzu-mode-lighter "")
     '(anzu-deactivate-region t)
     '(anzu-search-threshold 1000)
     '(anzu-replace-threshold 50)
     '(anzu-replace-to-string-separator " => "))

    (define-key isearch-mode-map [remap isearch-query-replace]  #'anzu-isearch-query-replace)
    (define-key isearch-mode-map [remap isearch-query-replace-regexp] #'anzu-isearch-query-replace-regexp))
#+end_src

** COMMENT Calc
#+begin_src emacs-lisp
  (use-package causal
    :config
    (define-key calc-mode-map (kbd "C-o") 'casual-main-menu))
#+end_src
** Syncthing
#+begin_src emacs-lisp
  (use-package emacs-conflict
    :elpaca (:host github :repo "ibizaman/emacs-conflict" :files ("emacs-conflict.el*")))
#+end_src

* Custom functions
** Insert datetime at point
#+begin_src emacs-lisp
  (defun insert-datetime (arg) (interactive "P")
         (let ((separator (pcase arg
                            ('(4) "-")
                            (0 "/")
                            (_ ""))))
           (insert
            (format-time-string
             (concat "%Y" separator "%m" separator "%d" "T" "%H" separator "%M")))))
  (global-set-key (kbd "M-I t") 'insert-datetime)
#+end_src
* Text Editing
** Unfill Paragraph
#+begin_src emacs-lisp
  (use-package unfill
    :bind
    ("M-q" . unfill-toggle)
    ("M-Q" . unfill-paragraph))
#+end_src
** Multiple cursors
When you want to add multiple cursors not based on continuous lines, but based on keywords in the buffer use =C-</C->=. First mark the word, then add more cursors. To get out of multiple-cursors-mode, press <return> or C-g. The latter will first disable multiple regions before disabling multiple cursors. If you want to insert a newline in multiple-cursors-mode, use C-j.
#+begin_src emacs-lisp
  (use-package multiple-cursors
    :bind
    ("C-S-c C-S-c" . 'mc/edit-lines)
    ("C-c C-<" . 'mc/mark-all-like-this)
    ("C-<" . 'mc/mark-previous-like-this)
    ("C->" . 'mc/mark-next-like-this))
#+end_src
** Expand Region
#+begin_src emacs-lisp
  (use-package expand-region
    :bind (("C-]" . er/expand-region)))
#+end_src
** Regex
*** Visual Regex on Steroid
#+begin_src emacs-lisp
  (use-package visual-regexp-steroids
    :bind (("C-c R"  . 'vr/replace)
           ("C-c q"  . 'vr/query-replace)
           ("C-c m`" . 'vr/mc-mark)))
#+end_src
** COMMENT Outshine an Outline alternative - replaced by =outli=
#+begin_src emacs-lisp
  (use-package outshine)
  (defvar outline-minor-mode-prefix "\M-#")
  (add-hook 'emacs-lisp-mode-hook 'outshine-mode)
  (define-key input-decode-map "\e\eOA" [(meta up)])
  (define-key input-decode-map "\e\eOB" [(meta down)])
#+end_src
** Outli an Outshine alternative
#+begin_src emacs-lisp
  (use-package outli
    :elpaca (:host github :repo "jdtsmith/outli")
    :bind (:map outli-mode-map ; convenience key to get back to containing heading
                ("C-c C-p" . (lambda () (interactive) (outline-back-to-heading))))
    :hook ((prog-mode) . outli-mode)
    :config
    (define-key outli-mode-map (kbd "<backtab>") #'outline-cycle-buffer)
    (setq outli-heading-config
          '((emacs-lisp-mode ";;" 59 t t)
            (tex-mode "%%" 37 t nil)
            (org-mode)
            (t
             (let*
                 ((c
                   (or comment-start "#"))
                  (space
                   (unless
                       (eq
                        (aref c
                              (1-
                               (length c)))
                        32)
                     " ")))
               (concat c space))
             42 nil t))))
#+end_src

** Vundo
[[https://www.reddit.com/r/emacs/comments/18hxs9a/emacs_advent_calendar_14_indentbars_kindicon/?sort=new][Emacs Advent Calendar 14: indent-bars, kind-icon, org-modern-indent, and more]]
#+begin_src emacs-lisp
  (use-package vundo
    :custom
    (vundo-glyph-alist vundo-unicode-symbols)
    (diff-switches "-u --color=never")
    :config
    (set-face-attribute 'vundo-default nil :family "Symbola"))
#+end_src

* Navigation
** Ace window
#+begin_src emacs-lisp
  (use-package ace-window
    :init (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)
                aw-char-position 'left
                aw-ignore-current nil
                aw-leading-char-style 'char
                aw-scope 'frame)
    :bind (("M-O w" . ace-window)
           ("M-O s" . ace-swap-window)))
#+end_src

** Winner mode
#+begin_src emacs-lisp
  (use-package winner
    :ensure nil
    :hook after-init
    :commands (winner-undo winnner-redo))
#+end_src

** Display Buffer List
*** COMMENT shell buffers
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*e?shell\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . -1) ;; -1 == L  0 == Mid 1 == R
                 (window-height . 0.4) ;; take 2/3 on bottom left
                 (window-parameters
                  (no-delete-other-windows . nil))))
#+end_src

*** Other pop buffers
#+begin_src emacs-lisp
  (add-to-list 'display-buffer-alist
               '("\\*\\(Backtrace\\|Compile-log\\|Messages\\|Warnings\\)\\*"
                 (display-buffer-in-side-window)
                 (side . bottom)
                 (slot . 0)
                 (window-height . 0.33)
                 (window-parameters
                  (no-delete-other-windows . nil))))

  (add-to-list 'display-buffer-alist
               '("\\*\\([Hh]elp\\|Command History\\|command-log\\)\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 0)
                 (window-width . 80)
                 (window-parameters
                  (no-delete-other-windows . nil))))

  (add-to-list 'display-buffer-alist
               '("\\*TeX errors\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 3)
                 (window-height . shrink-window-if-larger-than-buffer)
                 (dedicated . t)))

  (add-to-list 'display-buffer-alist
               '("\\*TeX Help\\*"
                 (display-buffer-in-side-window)
                 (side . right)
                 (slot . 4)
                 (window-height . shrink-window-if-larger-than-buffer)
                 (dedicated . t)))
#+end_src

** Popper
#+begin_src emacs-lisp
  (use-package popper
    :bind (("C-`"   . popper-toggle)
           ("M-`"   . popper-cycle)
           ("C-M-`" . popper-toggle-type))
    :init
    (setq popper-reference-buffers
          '("\\*Messages\\*"
            "Output\\*$"
            "\\*Async Shell Command\\*"
            help-mode
            compilation-mode))
    (popper-mode +1)
    (popper-echo-mode +1))                ; For echo area hints
#+end_src

** C-x 1 reversal
#+begin_src emacs-lisp
  (use-package zygospore)
  (global-set-key (kbd "C-x 1") 'zygospore-toggle-delete-other-windows)
#+end_src

** Avy
#+begin_src emacs-lisp
  (use-package avy
    :bind
    ("C-:"     . 'avy-goto-char)
    ("C-'"     . 'avy-goto-char-2)
    ("M-g f"   . 'avy-goto-line)
    ("M-g w"   . 'avy-goto-word-1)
    ("M-g e"   . 'avy-goto-word-0)
    ("C-c C-j" . 'avy-resume))
#+end_src

** Link Hint
#+begin_src emacs-lisp
  (use-package link-hint
    :bind
    ("C-c l o" . link-hint-open-link)
    ("C-c l c" . link-hint-copy-link))
#+end_src

** Projectile
#+begin_src emacs-lisp
  (use-package projectile
    :hook
    (after-init . projectile-mode)
    :bind
    (:map projectile-mode-map
          ("C-c p" . projectile-command-map)))
#+end_src

* Browsing
** Emacs-w3m
install w3m via apt/dnf
#+begin_src sh :dir /sudo::
  apt install w3m
#+end_src

#+begin_src emacs-lisp
  (use-package w3m)
#+end_src

** EWW
#+begin_src emacs-lisp
  (use-package shrface
    :config
    (shrface-basic)
    (shrface-trial)
    (shrface-default-keybindings) ; setup default keybindings
    (setq shrface-href-versatile t))

  (use-package shr-tag-pre-highlight
    :after shr
    :config
    (add-to-list 'shr-external-rendering-functions
                 '(pre . shr-tag-pre-highlight)))
  (use-package eww
    :ensure nil
    :defer t
    :init
    (add-hook 'eww-after-render-hook #'shrface-mode)
    ;; (add-hook 'eww-mode-hook 'ewnium-mode)
    :config
    (require 'shrface))
  (setq browse-url-browser-function 'eww-browse-url)
#+end_src

*** Prot extras for EWW
#+begin_src bash
  mkdir -p ~/emacs/vanilla.d/lisp
  wget https://gitlab.com/protesilaos/dotfiles/-/raw/master/emacs/.emacs.d/prot-lisp/prot-eww.el?ref_type=heads -O ~/emacs/vanilla.d/lisp/prot-eww.el
  wget https://gitlab.com/protesilaos/dotfiles/-/raw/master/emacs/.emacs.d/prot-lisp/prot-common.el?ref_type=heads -O ~/emacs/vanilla.d/lisp/prot-common.el
#+end_src

#+begin_src emacs-lisp
  (require 'prot-common)
  (require 'prot-eww)
#+end_src

** COMMENT Search Engines
#+begin_src emacs-lisp
  (use-package engine-mode
    :bind-keymap ("C-c s" . engine-mode-prefixed-map)
    :config
    (engine-mode t)
    (setq engine/browser-function 'eww-browse-url))

  (defengine amazon
    "https://www.amazon.com/s/ref=nb_sb_noss?url=search-alias%3Daps&field-keywords=%s")

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s")

  (defengine google
    "https://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g")

  (defengine google-images
    "https://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s")

  (defengine google-maps
    "https://maps.google.com/maps?q=%s"
    :docstring "Mappin' it up."
    :keybinding "m")

  (defengine project-gutenberg
    "https://www.gutenberg.org/ebooks/search/?query=%s")

  (defengine qwant
    "https://www.qwant.com/?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s")

  (defengine twitter
    "https://twitter.com/search?q=%s")

  (defengine wikipedia
    "https://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :docstring "Searchin' the wikis."
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine wolfram-alpha
    "https://www.wolframalpha.com/input/?i=%s")

  (defengine youtube
    "https://www.youtube.com/results?aq=f&oq=&search_query=%s")
#+end_src

* Input system
** Tamil
#+begin_src emacs-lisp
  (set-fontset-font "fontset-default" 'tamil "Noto Sans Tamil")
  ;;(use-package ibus
  ;;  :config (add-hook 'after-init-hook 'ibus-mode-on))
#+end_src

* Cryptography
#+begin_src emacs-lisp
  (use-package epa
    :ensure nil
    :config
    (setq epa-gpg-program "gpg2")
    (setq epa-pinentry-mode 'loopback)
    (setenv "GPG_AGENT_INFO" nil))
#+end_src

* Auto-completion
** Company
#+begin_src emacs-lisp
  (use-package company
    :diminish
    :bind (("C-." . #'company-complete))
    :hook (prog-mode . company-mode)
    :custom
    (company-dabbrev-downcase nil "Don't downcase returned candidates.")
    (company-show-numbers t "Numbers are helpful.")
    (company-tooltip-limit 20 "The more the merrier.")
    (company-tooltip-idle-delay 0.4 "Faster!")
    (company-async-timeout 20 "Some requests can take a long time. That's fine.")

    :config
    ;; Use the numbers 0-9 to select company completion candidates
    (let ((map company-active-map))
      (mapc (lambda (x) (define-key map (format "%d" x)
                                    `(lambda () (interactive) (company-complete-number ,x))))
            (number-sequence 0 9))))
#+end_src

* Directory Management

** Open directory of current buffer in external file manager
#+begin_src emacs-lisp
  (defun va/open-current-buffer-directory-externally ()
    (interactive)
    (let ((process-connection-type nil))
      (start-process ""
                     nil
                     "open"
                     (url-file-directory buffer-file-name))))
  (global-set-key (kbd "C-x D") 'va/open-current-buffer-directory-externally)
#+end_src


** Dired
#+BEGIN_SRC emacs-lisp
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :bind (("C-x C-j" . dired-jump))
    :custom ((dired-listing-switches "-alH --group-directories-first"))
    :config
    ())

  (use-package dired-hide-dotfiles
    :hook (dired-mode . dired-hide-dotfiles-mode)
    :config
    (define-key dired-mode-map "." #'dired-hide-dotfiles-mode))

  (use-package dired-subtree
    :after dired
    :bind (:map dired-mode-map
                ("TAB" . dired-subtree-toggle)))

  (use-package dired-open
    :config
    ;; Doesn't work as expected!
    ;;(add-to-list 'dired-open-functions #'dired-open-xdg t)
    (setq dired-open-extensions '(("mkv" . "mpv")
                                  ("webm" . "mpv")
                                  ("mp4" . "mpv")
                                  ("png" . "geeqie"))))


  (use-package dired-preview
    :config
    (setq dired-preview-delay 0.1)
    (setq dired-preview-max-size (expt 2 20))
    (setq dired-preview-ignored-extensions-regexp
          (concat "\\."
                  "\\(mkv\\|webm\\|mp4\\|mp3\\|ogg\\|m4a"
                  "\\|gz\\|zst\\|tar\\|xz\\|rar\\|zip"
                  "\\|iso\\|epub\\|pdf\\)")))
#+END_SRC

** COMMENT Dirvish
#+begin_src emacs-lisp
  (use-package dirvish
    :init
    (dirvish-override-dired-mode))
#+end_src

* Org
** Basic
- org-cycle-separator-line [[https://stackoverflow.com/questions/40332479/org-mode-folding-considers-whitespace-as-content][emacs - org-mode folding considers whitespace as content - Stack Overflow]]
- [[https://emacs.stackexchange.com/questions/51117/org-mode-control-whether-m-ret-inserts-a-newline-or-not-for-plain-lists][Org mode: control whether `M-<RET>` inserts a newline or not for plain lists?]]

  #+begin_src emacs-lisp
    (setq org-cycle-separator-lines 2)
    (setq org-blank-before-new-entry
          '((heading . nil)
            (plain-list-item . nil)))

    (setq org-startup-indented t
          ;;org-ellipsis "..." ;; folding symbol
          org-pretty-entities t
          org-fontify-whole-heading-line t
          org-fontify-done-headline t
          org-fontify-quote-and-verse-blocks t)

    (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
    (global-set-key (kbd "C-c l s") 'org-store-link)

    (defun my/org-font ()
      (face-remap-add-relative 'default :family "Iosevka"))
    (add-hook 'org-mode-hook 'my/org-font)
  #+end_src

** COMMENT Org file apps
#+begin_src emacs-lisp
  ((auto-mode . emacs)
   (directory . emacs)
   ("\\.mm\\'" . default)
   ("\\.x?html?\\'" . default)
   ("\\.pdf\\'" . default))
#+end_src
** Org Superstar
#+begin_src emacs-lisp
  (use-package org-modern
    :hook (org-mode . org-modern-mode))

  (use-package org-superstar
    :custom
    (org-superstar-special-todo-items t)
    (org-superstar-lightweight-lists t)
    :hook (org-mode . org-superstar-mode))
#+end_src

** Org Sticky Headers
#+begin_src emacs-lisp
  (use-package org-sticky-header
    :custom (org-sticky-header-mode t))
  (use-package org-table-sticky-header
    :custom (org-table-sticky-header-mode t))
#+end_src

** Org-download
#+begin_src emacs-lisp
  (use-package org-download
    :config
    (add-hook 'dired-mode-hook 'org-download-enable)
    (setq-default org-download-heading-lvl nil)
    (setq-default org-download-image-dir "~/ko-pa-ni/images")
    (setq org-download-screenshot-method "~/.scripts/sway-contrib/grimshot savecopy area")
    :bind (("C-c d s" . org-download-screenshot)
           ("C-c d y" . org-download-yank)))
#+end_src

** Clocking
#+begin_src emacs-lisp
  (setq org-clock-persist 'history)
  (setq org-clock-into-drawer "CLOCKING")
  (org-clock-persistence-insinuate)
#+end_src

** Org-agenda
#+begin_src emacs-lisp
  (setq org-agenda-files
        '("~/org/personal.org"
          "~/org/w.org"
          ;;"~/org/gcal-developer.org"
          ;;"~/org/gcal-profession.org"
          "~/org/kaappagam.org"
          "~/org/padi.org"
          "~/org/kadamai-thani.org"
          "~/org/kadamai-saama.org"
          "~/org/kadamai-mtechcse.org"
          "~/org/kadamai-yendravathu.org"
          "~/org/thirattu.org"
          "~/org/naadagam.org"
          ))

  (setq org-todo-keywords
        '((sequence "TODO" "NEXT" "PROJ" "WAIT" "SLEEP" "|" "DONE" "CANC")))

  ;; From: https://emacs.stackexchange.com/questions/17282/org-mode-logbook-note-entry-without-logbook-drawer
  (setq org-log-into-drawer "LOGBOOK")

  (setq org-agenda-span 10
        org-agenda-start-on-weekday nil
        org-agenda-start-day "-3d")

  (global-set-key (kbd "C-c a") 'org-agenda)
#+end_src

** Org-ql
#+begin_src emacs-lisp
  (use-package org-ql)
#+end_src

** COMMENT Org-gcal
#+begin_src emacs-lisp
  (use-package org-gcal
    :config
    (setq org-gcal-client-id "691697679170-vfhv024f23jmjbpmoh891u9bt0mhe1nb.apps.googleusercontent.com"
          org-gcal-client-secret "kK9mdg6MK4g_zYkFBHcDRV0P"
          org-gcal-file-alist '(("selva.developer@gmail.com" .  "~/org/work.org")
                                ("selva.on.profession@gmail.com" .  "~/org/work.org")))
    )
#+end_src

*** Google Calendar Integration
#+begin_src bash :dir /sudo::/ :result code
  pip3 install ical2orgpy
#+end_src

#+begin_src bash :tangle ~/emacs/google-calendar.sh
  #!/bin/bash
  WGET=wget
  ICS2ORG=ical2orgpy

  DEV_ICSFILE=~/org/gcal-developer.ics
  DEV_URL=https://calendar.google.com/calendar/ical/selva.developer%40gmail.com/private-55c78769215b5f36a3f14d6d6fd9d04f/basic.ics
  DEV_ORGFILE=~/org/gcal-developer.org

  PRO_ICSFILE=~/org/gcal-profession.ics
  PRO_URL=https://calendar.google.com/calendar/ical/selva.on.profession%40gmail.com/private-f9bcae9409c369949ba78b81789919fd/basic.ics
  PRO_ORGFILE=~/org/gcal-profession.org

  $WGET -O $DEV_ICSFILE $DEV_URL
  $WGET -O $PRO_ICSFILE $PRO_URL

  $ICS2ORG $DEV_ICSFILE $DEV_ORGFILE
  $ICS2ORG $PRO_ICSFILE $PRO_ORGFILE
#+end_src

#+begin_src bash
  chmod a+x ~/emacs/google-calendar.sh
#+end_src

#+begin_src conf
  5,20,35,50 * * * * ~/emacs/google-calendar.sh &> /dev/null #sync my org files
#+end_src

**** Notes
- Apparently org file generated from gcal files maintains the order by which the events are added to the google calendar. e.g: CareerCoach Vikram Anand that happened way back in the month of May is registered in the file after Hybrid Investing workshop which has not yet happened

** Org Refile
*** TODO
**** TODO Find possible values for =org-refile-targets=
*** Config
org-refile by default only targets current file and heading unless =org-refile-targets= is configured
#+begin_src emacs-lisp
  ;;use headings upto level 3
  (setq org-refile-targets '((org-agenda-files :maxlevel . 9)))
  (setq org-log-refile 'note)
  (setq org-refile-use-outline-path 'file) ;; include files not just headings
  (setq org-refile-allow-creating-parent-nodes 'confirm) ;; allow creating new nodes on-fly
  (setq org-outline-path-complete-in-steps nil)         ; refile in a single go
#+end_src

** Org-roam
#+begin_src emacs-lisp
  (use-package org-roam
    :init
    :defer
    (setq org-roam-v2-ack t)
    :custom
    (org-roam-directory "~/org/roam/")
    (org-roam-completion-everywhere t)
    :bind (("C-c n b" . org-roam-buffer-toggle)
           ("C-c n f" . org-roam-node-find)
           ("C-c n t" . va/org-roam-node-find-by-tag)
           ("C-c n i" . org-roam-node-insert)
           :map org-mode-map
           ("C-M-i"    . completion-at-point))
    :hook (after-init. org-roam-setup))

  (setq org-roam-v2-ack t)

  (with-eval-after-load 'org-roam
    (require 'org-roam-protocol))

  (setq org-roam-capture-ref-templates
        '("i" "internet" plain #'org-roam-capture--get-point "%?"
          :file-name "float/%<%Y%m%d%H%M>-${slug}"
          :head "#+title: ${title}\n#+roam_key: ${ref}%?"
          :unnarrowed t))

  (defun va/org-roam-node-has-tag (node tag)
    "Filter function to check if the given NODE has the specified TAG."
    (member tag (org-roam-node-tags node)))

  (defun va/org-roam-node-find-by-tag ()
    "Find and open an Org-roam node based on a specified tag."
    (interactive)
    (let ((tag (read-string "Enter tag: ")))
      (org-roam-node-find nil nil (lambda (node) (va/org-roam-node-has-tag node tag)))))
#+end_src

** Org Roam UI
#+begin_src emacs-lisp
  (use-package org-roam-ui
    :elpaca (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
    :after org-roam
    ;;         normally we'd recommend hooking orui after org-roam, but since org-roam does not have
    ;;         a hookable mode anymore, you're advised to pick something yourself
    ;;         if you don't care about startup time, use
    ;;  :hook (after-init . org-roam-ui-mode)
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))

#+end_src
** Org-remark
#+begin_src emacs-lisp
  (use-package org-remark
    :elpaca (:host github :repo "nobiot/org-remark")
    :bind (;; :bind keyword also implicitly defers org-remark itself.
           ;; Keybindings before :map is set for global-map.
           ("C-c n m" . org-remark-mark)
           ("C-c n l" . org-remark-mark-line)
           :map org-remark-mode-map
           ("C-c n o" . org-remark-open)
           ("C-c n ]" . org-remark-view-next)
           ("C-c n [" . org-remark-view-prev)
           ("C-c n r" . org-remark-remove)
           ("C-c n d" . org-remark-delete))
    ;; Alternative way to enable `org-remark-global-tracking-mode' in
    ;; `after-init-hook'.
    ;; :hook (after-init . org-remark-global-tracking-mode)
    :init
    ;; It is recommended that `org-remark-global-tracking-mode' be
    ;; enabled when Emacs initializes. Alternatively, you can put it to
    ;; `after-init-hook' as in the comment above
    (org-remark-global-tracking-mode +1)
    :config
    (use-package org-remark-info
      :ensure nil
      :after info
      :config (org-remark-info-mode +1))

    (use-package org-remark-eww
      :ensure nil
      :after eww
      :config (org-remark-eww-mode +1))
    (use-package org-remark-nov
      :ensure nil
      :after nov
      :config (org-remark-nov-mode +1)))
#+end_src

** Org Cliplink
[[https://github.com/rexim/org-cliplink][GitHub - rexim/org-cliplink: Insert org-mode links from clipboard]]
#+begin_src emacs-lisp
  (use-package org-cliplink
    :bind (("C-c l i" . org-cliplink)))
#+end_src

** Org Capture
*** Emacs daemon
From https://www.emacswiki.org/emacs/EmacsAsDaemon

Systemd is the supported method of running applications at startup on most Linux distributions. The following configuration file emacs.service will be included in the standard Emacs installation as of 26.1.

**** All you need to do is copy this to ~/.config/systemd/user/emacs.service .
#+BEGIN_SRC conf :tangle ~/emacs/emacs.service
  [Unit]
  Description=Emacs text editor
  Documentation=info:emacs man:emacs(1) https://gnu.org/software/emacs/

  [Service]
  Type=forking
  ExecStart=/usr/bin/emacs --daemon
  ExecStop=/usr/bin/emacsclient --eval "(kill-emacs)"
  Environment=SSH_AUTH_SOCK=%t/keyring/ssh
  Restart=on-failure

  [Install]
  WantedBy=default.target
#+END_SRC

**** And add the following to =.bashrc= in linux
From https://emacs.stackexchange.com/questions/24095/bashrc-script-to-automatically-create-emacs-server-session-on-startup
#+BEGIN_SRC bash
  export ALTERNATE_EDITOR=""
  export VISUAL='emacsclient --alternate-editor='
  export EDITOR='emacsclient --alternate-editor='
#+END_SRC

**** For windows add the following into =.emacs=
#+BEGIN_SRC emacs-lisp
  (load "server")
  (unless (server-running-p) (server-start))
#+END_SRC

**** Note
Note that =~/.bashrc= runs every time you open a terminal, not when you log in. On normal Unix systems, the file that runs when you log in is =~/.profile= (or =~/.bash_profile=, =~/.profile=, etc. depending on your login shell), but OSX does things differently (and actually runs =~/.bash_profile= or =~/.profile= and not =~/.bashrc= when you open a terminal due to a combination of bad design in OSX and bad design in bash: OSX opens a login shell in each terminal and bash doesn't load =.bashrc= in login shells — see https://unix.stackexchange.com/questions/110998/missing-source-bashrc-mac-terminal-profile).

*** Linux
Both of them working now.

**** Capture from browser (Firefox)
Can capture from browser

***** Create a =.desktop= file
From https://github.com/zv/dotfilez

#+BEGIN_SRC  conf
  [Desktop Entry]
  Name=org-protocol
  Exec=emacsclient --create-frame \
  --socket-name 'capture' \
  --alternate-editor='' \
  --frame-parameters='(quote (name . "capture"))' \
  --no-wait \
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol;
#+END_SRC

Succinct version of the same code snippet as above.
#+BEGIN_SRC  conf :tangle ~/emacs/org-protocol.desktop
  [Desktop Entry]
  Name=org-protocol
  Exec=emacsclient --create-frame --alternate-editor='' --frame-parameters='(quote (name . "capture"))' --no-wait  %u
  Type=Application
  Terminal=false
  Categories=System;
  MimeType=x-scheme-handler/org-protocol;
#+END_SRC

And run the following
#+BEGIN_SRC bash
  chmod a+x ~/emacs/org-protocol.desktop
  ln -s ~/emacs/org-protocol.desktop ~/.local/share/applications/
  update-desktop-database ~/.local/share/applications/
#+END_SRC

Org-capture book-marklet for firefox, add this to bookmark toolbar on firefox
#+BEGIN_SRC js
  //org-protocol.desktop the one that works now
  javascript:location.href = 'org-protocol://capture?template=l'\
    + '&url='   + encodeURIComponent(location.href)\
    + '&title=' + encodeURIComponent(document.title)\
    + '&body='  + encodeURIComponent(window.getSelection())

#+END_SRC

#+begin_src js
  emacsclient 'org-protocol://capture?template=l&url=URL&title=TITLE&body=BODY'
#+end_src

#+begin_src sh
  gtk-launch org-protocol2  'org-protocol://capture?template=l&url=URL&title=TITLE&body=BODY'
#+end_src
**** Capture from desktop environment
- bind the following script to a shortcut
- no capture from browser

  #+BEGIN_SRC bash  :tangle ~/emacs/org-protocol.sh
    #!/bin/bash
    set -euo pipefail

    emacsclient --create-frame \
                #--socket-name "capture" \
                --alternate-editor="" \
                --frame-parameters="(quote (name . \"capture\"))" \
                --no-wait \
                --eval "(my/org-capture-frame)"

  #+END_SRC

  For opening and closing a separate frame for the capture.
  From https://gist.github.com/progfolio/af627354f87542879de3ddc30a31adc1
  #+BEGIN_SRC emacs-lisp
    (defun my/delete-capture-frame (&rest _)
      "Delete frame with its name frame-parameter set to \"capture\"."
      (if (equal "capture" (frame-parameter nil 'name))
          (delete-frame)))
    (advice-add 'org-capture-finalize :after #'my/delete-capture-frame)

    (defun my/org-capture-frame ()
      "Run org-capture in its own frame."
      (interactive)
      (require 'cl-lib)
      (select-frame-by-name "capture")
      (delete-other-windows)
      (cl-letf (((symbol-function 'switch-to-buffer-other-window) #'switch-to-buffer))
        (condition-case err
            (org-capture)
          ;; "q" signals (error "Abort") in `org-capture'
          ;; delete the newly created frame in this scenario.
          (user-error (when (string= (cadr err) "Abort")
                        (delete-frame))))))

  #+END_SRC

*** Mac
https://www.reddit.com/r/emacs/comments/6lzyg2/heres_how_to_do_emacsclient_global_orgcapture/

*** Windows
https://sachachua.com/blog/2015/11/capturing-links-quickly-with-emacsclient-org-protocol-and-chrome-shortcut-manager-on-microsoft-windows-8/

*** Templates
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)

  (global-set-key (kbd "C-c c") 'org-capture)

  (setq org-protocol-default-template-key "l")
  (setq org-capture-templates
        '(("t" "Todo" entry
           (file+headline "~/org/pidi.org" "Tasks")
           "* TODO %?\n  %i\n  %a")

          ("l" "Link" entry
           (file+olp "~/org/pidi.org" "Web Links")
           "* %a\n %?\n %i")

          ("r" "Resource" plain
           (file "~/org/resources.org")
           "%T -- %L"
           :immediate-finish t)

          ("n" "Note" plain
           (file+olp "~/org/note.org" "Note")
           "%a\n %?\n %i")

          ("c" "Collection" plain
           (file+olp "~/org/collection.org" "Collection")
           "** %a\n %?\n %i")

          ("j" "Journal" entry
           (file+olp+datetree "~/org/pidi.org" "Journal")
           "* %?\nEntered on %U\n  %i\n  %a")))
#+END_SRC

**** Tips and Troubleshooting
***** No server buffers remain to edit
****** Problem
#+begin_src text
  Greedy org-protocol handler.  Killing client.
  No server buffers remain to edit
#+end_src

******* [[https://github.com/sprig/org-capture-extension/issues/1#issuecomment-1817773442][Solution]]
The entry that is declared in the capture templates must exist in the file.  =Collection=, =Note=, =Web Links= must exist in the respective files.

*** COMMENT html-capture
**** [[https://torres.epv.uniovi.es/centon/eww-html-to-org.html][Emacs. Transform a html page to an Org file]]
- Notes ::
  - Converts all necessary text, but internal links are broken.
#+begin_src emacs-lisp
   (defun etm-eww-html-to-org (&optional url)
           "Convert a URL or a web page (eww) to org text.

  It includes images, that are stored in the directory
  images."
           (interactive nil eww-mode)
           (let ((url (or url (plist-get eww-data :url)))
                     (dirimages "images"))
             (switch-to-buffer (generate-new-buffer "*eww2org*"))
             (unless (executable-find "pandoc")
                   (error "The program pandoc does not exist."))
             (message "Transforming %s" url)
             (shell-command (concat "pandoc -f html -t org  --extract-media=" dirimages " "  url) (current-buffer))
             (org-mode)))
#+end_src

**** TODO Try [[https://github.com/alphapapa/org-web-tools][org-web-tools]]
**** EWW and w3m org-web clipper from [[http://www.bobnewell.net/publish/35years/webclipper.html][Bob Newell]]
#+begin_src emacs-lisp

  ;; org-eww and org-w3m should be in your org distribution, but see
  ;; note below on patch level of org-eww.
  (require  'ol-eww)
  (require  'ol-w3m)

  (defvar org-website-page-archive-file "~/kuri/org/websites.org")
  (defun org-website-clipper ()
    "When capturing a website page, go to the right place in capture file,
     but do sneaky things. Because it's a w3m or eww page, we go
     ahead and insert the fixed-up page content, as I don't see a
     good way to do that from an org-capture template alone. Requires
     Emacs 25 and the 2017-02-12 or later patched version of org-eww.el."
    (interactive)

    ;; Check for acceptable major mode (w3m or eww) and set up a couple of
    ;; browser specific values. Error if unknown mode.

    (cond
     ((eq major-mode 'w3m-mode)
      (org-w3m-copy-for-org-mode))
     ((eq major-mode 'eww-mode)
      (org-eww-copy-for-org-mode))
     (t
      (error "Not valid -- must be in w3m or eww mode")))

    ;; Check if we have a full path to the archive file.
    ;; Create any missing directories.

    (unless (file-exists-p org-website-page-archive-file)
      (let ((dir (file-name-directory org-website-page-archive-file)))
        (unless (file-exists-p dir)
          (make-directory dir))))

    ;; Open the archive file and yank in the content.
    ;; Headers are fixed up later by org-capture.

    (find-file org-website-page-archive-file)
    (goto-char (point-max))
    ;; Leave a blank line for org-capture to fill in
    ;; with a timestamp, URL, etc.
    (insert "\n\n")
    ;; Insert the web content but keep our place.
    (save-excursion (yank))
    ;; Don't keep the page info on the kill ring.
    ;; Also fix the yank pointer.
    (setq kill-ring (cdr kill-ring))
    (setq kill-ring-yank-pointer kill-ring)
    ;; Final repositioning.
    (forward-line -1)
    )
#+end_src

**** The following [[org-protocol-capture-html][from alphapapa]] but doesn't suit my needs
#+begin_src emacs-lisp
  (use-package org-protocol-capture-html)
#+end_src

Capture template
#+begin_src emacs-lisp
  ("w" "Web site" entry
   (file "")
   "* %a :website:\n\n%U %?\n\n%:initial")
#+end_src

Firefox bookmarklet
#+begin_src js
  javascript:location.href = 'org-protocol://capture-html?template=w&url=' + encodeURIComponent(location.href) + '&title=' + encodeURIComponent(document.title || "[untitled page]") + '&body=' + encodeURIComponent(function () {var html = ""; if (typeof document.getSelection != "undefined") {var sel = document.getSelection(); if (sel.rangeCount) {var container = document.createElement("div"); for (var i = 0, len = sel.rangeCount; i < len; ++i) {container.appendChild(sel.getRangeAt(i).cloneContents());} html = container.innerHTML;}} else if (typeof document.selection != "undefined") {if (document.selection.type == "Text") {html = document.selection.createRange().htmlText;}} var relToAbs = function (href) {var a = document.createElement("a"); a.href = href; var abs = a.protocol + "//" + a.host + a.pathname + a.search + a.hash; a.remove(); return abs;}; var elementTypes = [['a', 'href'], ['img', 'src']]; var div = document.createElement('div'); div.innerHTML = html; elementTypes.map(function(elementType) {var elements = div.getElementsByTagName(elementType[0]); for (var i = 0; i < elements.length; i++) {elements[i].setAttribute(elementType[1], relToAbs(elements[i].getAttribute(elementType[1])));}}); return div.innerHTML;}());
#+end_src

** Org Babel
*** Notes
- https://pank.eu/blog/pretty-babel-src-blocks.html
*** COMMENT Ledger
Since =ob-ledger= package is not there by default, download it from a source
#+begin_src bash
  wget -c https://raw.githubusercontent.com/tkf/org-mode/master/lisp/ob-ledger.el -O ~/emacs/vanilla.d/lisp/ob-ledger.el
#+end_src
*** Babel languages
#+begin_src emacs-lisp
  (setq org-babel-sh-command "~/emacs/org-babel-stderr.sh")
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((shell . t)
     (lisp . t)
     ;;(ledger . t)
     (ditaa . t)
     (dot . t)
     (latex . t)
     (plantuml . t)
     (shell . t)
     (octave . t)
     ;;(jupyter . t)
     ;;(ipython . t)
     (python . t)))

  (setq org-babel-lisp-eval-fn #'sly-eval)
  (setq org-plantuml-jar-path "~/.softwares/plantuml.jar")
#+end_src

*** ob-async
#+begin_src emacs-lisp
  (use-package ob-async
    :custom
    (ob-async-no-async-languages-alist '("ipython")))
#+end_src

**** COMMENT ob-async-pre-execute-src-block-hook
Some org-babel languages require additional user configuration. For example, ob-julia requires inferior-julia-program-name to be defined. Normally you would define such variables in your init.el, but src block execution occurs in an Emacs subprocess which does not evaluate init.el on startup. Instead, you can place initialization logic in ob-async-pre-execute-src-block-hook, which runs before execution of every src block.

Example:
#+begin_src emacs-lisp
  (add-hook 'ob-async-pre-execute-src-block-hook
            '(lambda ()
               (setq inferior-julia-program-name "/usr/local/bin/julia")))

#+end_src

[[https://orgmode.org/worg/org-contrib/babel/languages/lang-compat.html][Babel: Language Compatability]]
#+begin_src bash :tangle ~/emacs/org-babel-stderr.sh
  #!/bin/bash
  {
      bash $1
  } 2>&1
#+end_src

** Tempo
#+begin_src emacs-lisp
  ;;(add-function :before-until electric-pair-inhibit-predicate
  ;;	   (lambda (c) (eq c ?<)))

  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
  (add-to-list 'org-structure-template-alist '("cl" . "src lisp"))
#+end_src

** Mathpix
Capture latex equations from browser
#+begin_src emacs-lisp
  (use-package mathpix.el
    :elpaca (:host github :repo "jethrokuan/mathpix.el")
    :custom ((mathpix-app-id "app-id")
             (mathpix-app-key "app-key"))
    :bind
    ("C-x m" . mathpix-screenshot))
#+end_src

** Org-media-note
#+begin_src emacs-lisp
  (use-package pretty-hydra)
  (use-package org-media-note
    :elpaca (:host github :repo "yuchen-lea/org-media-note")
    :hook (org-mode .  org-media-note-mode)
    :bind (("C-<f2>" . org-media-note-hydra/body))  ;; Main entrance
    :custom
    (org-media-note-screenshot-image-dir "~/kuri/images/"))
#+end_src


** Treating webp as image
#+begin_src emacs-lisp
  (setq image-file-name-regexps "\\.\\(GIF\\|JP\\(?:E?G\\)\\|P\\(?:BM\\|GM\\|N[GM]\\|PM\\)\\|SVG\\|TIFF?\\|X\\(?:[BP]M\\)\\|gif\\|jp\\(?:e?g\\)\\|p\\(?:bm\\|gm\\|n[gm]\\|pm\\)\\|webp\\|svg\\|tiff?\\|x\\(?:[bp]m\\)\\)\\'")

  (setq org-html-inline-image-rules
        '(("file" . "\\(?:\\.\\(?:gif\\|\\(?:jpe?\\|pn\\|sv\\)g\\|webp\\)\\)")
          ("http" . "\\(?:\\.\\(?:gif\\|\\(?:jpe?\\|pn\\|sv\\)g\\|webp\\)\\)")
          ("https" . "\\(?:\\.\\(?:gif\\|\\(?:jpe?\\|pn\\|sv\\)g\\|webp\\)\\)")) )

#+end_src

** Youtube link and mpv
*** [[https://github.com/bitspook/spookmax.d/blob/5f1d71cf572cd18dc7d41f292753d4b7683877c3/readme.org#org-mode][from spookmax]]  [[[yt://www.youtube.com/watch?v=eaZUZCzaIgw][video]]]
#+begin_src emacs-lisp
  (defun spook-org--follow-yt-link (path prefix)
    (let* ((url (format "https:%s" path))
           ;;(display-buffer-alist `((,shell-command-buffer-name-async . (display-buffer-no-window))))
           )
      (if (and prefix (executable-find "mpv"))
          (browse-url url)
        (async-shell-command (format "mpv \"%s\"" url))
        (message "Launched mpv with \"%s\"" url))))

  (defun spook-org--export-yt-link (path desc backend)
    (when (eq backend 'html)
      (let* ((video-id (cadar (url-parse-query-string path)))
             (url (if (string-empty-p video-id) path
                    (format "//youtube.com/embed/%s" video-id))))
        (format
         "<iframe width=\"560\" height=\"315\" src=\"%s\" title=\"%s\" frameborder=\"0\" allowfullscreen></iframe>"
         url desc))))

  (org-link-set-parameters "yt" :follow #'spook-org--follow-yt-link :export #'spook-org--export-yt-link)
#+end_src

** Reference Management
*** Bibtex
=bibtex-autokey-*= variables are used while constructing the key for a bibtex entry automatically from the fields of the bibtex entry. The bibtex entries can be created from =doi=, =arxiv=
#+begin_src emacs-lisp
  (use-package ivy-bibtex
    :config
    ;;; create a key for the bibtex entry automatically using the rules
    (setq bibtex-autokey-year-length 4
          bibtex-autokey-name-year-separator "-"
          bibtex-autokey-year-title-separator "-"
          bibtex-autokey-titleword-separator "-"
          bibtex-autokey-titlewords 2
          bibtex-autokey-titlewords-stretch 2
          bibtex-autokey-titleword-length 5)
    ;;; path to the bibliography(.bib) files
    (setq bibtex-completion-bibliography '("~/kuri/bibliography/references.bib")
          bibtex-completion-library-path '("~/ko-pa-ni/mattravai/papers/")
          bibtex-completion-notes-path   "~/kuri/bibliography/notes/"
          bibtex-completion-notes-template-multiple-files
          "* ${author-or-editor}, ${title}, ${journal}, (${year}) :${=type=}: \n\nSee [[cite:&${=key=}]]\n"

          bibtex-completion-additional-search-fields '(keywords)
          bibtex-completion-display-formats
          '((article       . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${journal:40}")
            (inbook        . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
            (incollection  . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
            (t             . "${=has-pdf=:1}${=has-note=:1} ${year:4} ${author:36} ${title:*}"))
          bibtex-completion-pdf-open-function
          (lambda (fpath)
            (call-process "open" nil 0 nil fpath))))
#+end_src

*** Org-ref
org-ref is very helpful when authoring papers. =org-ref-insert-link= function can be used to insert citations. The citations are looked up from list of =.bib= files as conigured in variable =bibtex-completion-bibliography=. org-ref has to be used in conjuction with =ivy-bibtex= package.
org-ref enables us to insert citations, export them to latex and even non-latex exports consistently.
#+begin_src emacs-lisp
  (use-package org-ref
    :bind (:map org-mode-map
                ("C-c C-S-r" . org-ref-bibtex-new-entry/body)
                ("C-c ]" . org-ref-insert-link-hydra/body)))
  ;;(use-package org-ref-ivy)
#+end_src

*** Ebib
#+begin_src emacs-lisp
  (use-package ebib
    :config
    (setq ebib-bibtex-dialect 'biblatex))
#+end_src

*** Ebib-biblio
When fetching entries via Biblio, Ebib checks for duplicates based on the key of the new entry. This will only work reliably if both Ebib and Biblio are configured to automatically generate BibTeX keys. Ebib does this by default (see the option ebib-autogenerate-keys), Biblio can be configured to do so by setting the option biblio-bibtex-use-autokey.

** Reading list - org-books
#+begin_src emacs-lisp
  (use-package org-books
    :config
    (setq org-books-file "~/my-list.org"))
#+end_src
** Org Present
#+begin_src emacs-lisp
  (eval-after-load "org-present"
  '(progn
     (add-hook 'org-present-mode-hook
               (lambda ()
                 (org-present-big)
                 (org-display-inline-images)
                 (org-present-hide-cursor)
                 (org-present-read-only)))
     (add-hook 'org-present-mode-quit-hook
               (lambda ()
                 (org-present-small)
                 (org-remove-inline-images)
                 (org-present-show-cursor)
                 (org-present-read-write)))))
#+end_src

* Search
#+begin_src emacs-lisp
  (use-package deadgrep)
#+end_src

* Financial
** Accounting
#+begin_src emacs-lisp
  (use-package ledger-mode)
#+end_src

** COMMENT Ledger
#+begin_src emacs-lisp
  (setq org-capture-templates
        (append '(("e" "Ledger entries")

                  ("ecc" "Citi Credit Card" plain
                   (file "~/ko-pa-ni/thani/expenses2024.ledger")
                   "%(org-read-date) %^{Payee}
    Liabilities:CC:Citi
    Expenses:%^{Account}  %^{Amount}
  ")
                  ("ech" "HDFC credit card" plain
                   (file "~/ko-pa-ni/thani/expenses2024.ledger")
                   "%(org-read-date) * %^{Payee}
    Liabilities:CC:HDFC
    Expenses:%^{Account}  %^{Amount}
  "))
                org-capture-templates))
#+end_src

* Programming
** Crontab editing
#+begin_src emacs-lisp
  (defun crontab-e ()
    "Run `crontab -e' in a emacs buffer."
    (interactive)
    (with-editor-async-shell-command "crontab -e"))
#+end_src
** Sloccount
#+begin_src emacs-lisp
  (use-package cloc)
#+end_src
** Whitespace cleanup
#+begin_src emacs-lisp
  (use-package whitespace
    :ensure nil
    :hook (before-save . whitespace-cleanup))
#+end_src
** Documentation
#+begin_src emacs-lisp
  (use-package devdocs
    :defer
    :bind ("C-c M-d" . devdocs-lookup)
    :init
    (add-to-list 'display-buffer-alist
                 '("\\*devdocs\\*"
                   display-buffer-in-side-window
                   (side . right)
                   (slot . 3)
                   (window-parameters . ((no-delete-other-windows . t)))
                   (dedicated . t))))
#+end_src

** Compilation
#+begin_src emacs-lisp
  (use-package compile
    :ensure nil
    :custom
    (compilation-scroll-output 'first-error)
    (compilation-always-kill t)
    (compilation-max-output-line-length nil)
    :hook (compilation-mode . hl-line-mode)
    :init
                                          ; from enberg on #emacs
    (add-hook 'compilation-finish-functions
              (lambda (buf str)
                (if (null (string-match ".*exited abnormally.*" str))
                    ;;no errors, make the compilation window go away in a few seconds
                    (progn
                      (run-at-time
                       "1 sec" nil 'delete-windows-on
                       (get-buffer-create "*compilation*"))
                      (message "No Compilation Errors!"))))))
#+end_src

** COMMENT Make executable
#+begin_src emacs-lisp
  (use-package executable
    :ensure nil
    :hook (after-save . executable-make-buffer-file-executable-if-script-p))
#+end_src

** Fill Function Arguments
#+begin_src emacs-lisp
  (use-package fill-function-arguments
    :bind (:map prog-mode-map
                ("C-c M-q" . fill-function-arguments-dwim)))
#+end_src

** Programming languages
#+begin_src emacs-lisp
  (use-package typescript-mode)
  ;; (use-package csharp-mode)
  (use-package yaml-mode)
  (use-package dockerfile-mode)
  (use-package toml-mode)
#+end_src

*** Python
**** Inspirations
- https://robbmann.io/posts/006_emacs_2_python/
- https://medium.com/analytics-vidhya/managing-a-python-development-environment-in-emacs-43897fd48c6a
**** Treesitter mode
#+begin_src emacs-lisp
  (setq major-mode-remap-alist
        '((python-mode . python-ts-mode)))
#+end_src

#+begin_src emacs-lisp123
  (with-eval-after-load "eglot"
    (setq eglot-report-progress nil)
    (add-to-list 'eglot-stay-out-of 'eldoc))
#+end_src

#+begin_src shell
  sudo apt install python3-pylsp
#+end_src

**** MyPy
#+begin_src sh :dir /sudo::
  apt install mypy
#+end_src
**** Shell
#+begin_src emacs-lisp
  (defun setup-python-shell ()
    "Python shell."
    (setq python-shell-interpreter "python"
          python-shell-interpreter-args "-i")
    (setq python-shell-completion-native-enable nil))

  (use-package python
    :ensure nil
    :hook ((python-mode . setup-python-shell)
           (python-mode . hs-minor-mode))
    :bind (:map python-mode-map
                ("<f5>" . format-buffer)))
#+end_src
**** Blacken
#+begin_src emacs-lisp
  (use-package blacken
    :hook ((python-mode . blacken-mode)
           (python-mode . outli-mode)))
  ;; (python-mode . (lambda ()(setq outline-heading-end-regexp ":[^\n]*\n")))))
  (use-package pyvenv)
  (setq-default indent-tabs-mode nil)
#+end_src

**** COMMENT Elpy
#+begin_src bash :dir /sudo::
  apt install python3-jedi black python3-autopep8 yapf3 python3-yapf
  pip install virtualenvwrapper
#+end_src

Emacs side of things
#+begin_src emacs-lisp
  (setenv "WORKON_HOME" "~/.virtualenvs")
  (use-package elpy
    :defer t
    :init
    (advice-add 'python-mode :before 'elpy-enable)
    :config
    (setq elpy-rpc-virtualenv-path 'current))

  ;; Enable Flycheck
  (when (require 'flycheck nil t)
    (setq elpy-modules (delq 'elpy-module-flymake elpy-modules))
    (add-hook 'elpy-mode-hook 'flycheck-mode))

  ;; Enable autopep8
  ;; (require 'py-autopep8)
  ;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

  ;; https://elpy.readthedocs.io/en/latest/customization_tips.html#enable-full-font-locking-of-inputs-in-the-python-shell
  (advice-add 'elpy-shell--insert-and-font-lock
              :around (lambda (f string face &optional no-font-lock)
                        (if (not (eq face 'comint-highlight-input))
                            (funcall f string face no-font-lock)
                          (funcall f string face t)
                          (python-shell-font-lock-post-command-hook))))

  (advice-add 'comint-send-input
              :around (lambda (f &rest args)
                        (if (eq major-mode 'inferior-python-mode)
                            (cl-letf ((g (symbol-function 'add-text-properties))
                                      ((symbol-function 'add-text-properties)
                                       (lambda (start end properties &optional object)
                                         (unless (eq (nth 3 properties) 'comint-highlight-input)
                                           (funcall g start end properties object)))))
                              (apply f args))
                          (apply f args))))

#+end_src

***** COMMENT Debuging
[[https://github.com/jorgenschaefer/elpy/issues/1727#issuecomment-564248584][jorgenschaefer/elpy#1727 Problems with elpy and virtual environment]]
#+begin_src emacs-lisp
  (progn
    (message "python env: %s" pyvenv-virtual-env)
    (message "python env (env var): %s" (getenv "VIRTUAL_ENV"))
    (message "python exec: %s" python-shell-interpreter)
    (message "python exec (full): %s" (executable-find python-shell-interpreter))
    (message "python rpc exec: %s" elpy-rpc-python-command)
    (message "python rpc exec (full): %s"
             (executable-find elpy-rpc-python-command))
    (message "rpc-virtualenv-path: %s" elpy-rpc-virtualenv-path)
    (message "python rpc venv location : %s" (elpy-rpc-get-or-create-virtualenv))
    (with-elpy-rpc-virtualenv-activated
     (message "python venv exec: %s" (executable-find elpy-rpc-python-command))))
#+end_src

**** COMMENT importmagic
#+begin_src emacs-lisp
  (use-package importmagic
    :custom
    (importmagic-be-quiet t)
    ;; :hook (python-mode . gopar/enable-importmagic-if-found)
    :hook (python-mode . (lambda () (run-at-time "3 sec" nil 'gopar/enable-importmagic-if-found)))
    :init
    (defun gopar/enable-importmagic-if-found ()
      "Format the current buffer using the 'importmagic` program, if available."
      (interactive)
      (if (zerop (shell-command "python -c 'import importmagic'"))
          (importmagic-mode))))
#+end_src

**** COMMENT Jedi
#+begin_src emacs-lisp
  (use-package jedi
    :defer
    ;; :hook (python-mode . gopar/enable-jedi-if-found)
    :hook (python-mode . (lambda () (run-at-time "3 sec" nil 'gopar/enable-jedi-if-found)))
    :custom
    (jedi:tooltip-method nil)
    :init
    (defun gopar/enable-jedi-if-found ()
      "Format the current buffer using the jedi program, if available."
      (interactive)
      (if (zerop (shell-command "python -c 'import jedi'"))
          (jedi:setup))))
#+end_src

**** Debugger
#+begin_src emacs-lisp
  (use-package gud
    :ensure nil
    :custom
    (gud-pdb-command-name "PYTHONBREAKPOINT=pdb.set_trace python -m pdb"))
#+end_src

*** Javascript
#+begin_src emacs-lisp
  (use-package indium
    :elpaca (:host github :repo "NicolasPetton/Indium")
    :hook ((js2-mode . indium-interaction-mode)))
  (setq js-indent-level 2)
#+end_src

*** CSV mode
#+begin_src emacs-lisp
  (use-package csv-mode
    :config (add-hook 'csv-mode-hook 'csv-guess-set-separator))
  (add-to-list 'auto-mode-alist '("\\.tsv\\'" . csv-mode))
#+end_src

** Language Servers
#+begin_src emacs-lisp
  (use-package lsp-mode
    :ensure nil
    :hook ((c-mode          ; clangd
            c++-mode        ; clangd
            c-or-c++-mode   ; clangd
            java-mode       ; eclipse-jdtls
            js-mode         ; ts-ls (tsserver wrapper)
            js-jsx-mode     ; ts-ls (tsserver wrapper)
            typescript-mode ; ts-ls (tsserver wrapper)
            python-mode     ; pyright
            web-mode        ; ts-ls/HTML/CSS
            haskell-mode    ; haskell-language-server
            ) . lsp-deferred)
    ;; :hook ((lsp-mode . lsp-diagnostics-mode)
    ;;        (lsp-mode . lsp-completion-mode-maybe))
    :commands lsp
    :preface
    (defun lsp-completion-mode-maybe ()
      (unless (bound-and-true-p cider-mode)
        (lsp-completion-mode 1)))
    :custom
    (setq lsp-auto-guess-root t)
    (setq lsp-log-io nil)
    (setq lsp-restart 'auto-restart)
    (setq lsp-signature-auto-activate nil)
    (setq lsp-signature-render-documentation nil)
    (setq lsp-eldoc-hook nil)
    (setq lsp-modeline-code-actions-enable nil)
    (setq lsp-modeline-diagnostics-enable nil)
    (setq lsp-enable-snippet nil)
    (setq read-process-output-max (* 1024 1024)) ;; 1MB
    (setq lsp-idle-delay 0.5)

    (lsp-keymap-prefix "C-c l")
    (lsp-diagnostics-provider :flymake)
    (lsp-completion-provider :none)
    (lsp-session-file (expand-file-name ".lsp-session" user-emacs-directory))
    (lsp-log-io nil)
    (lsp-keep-workspace-alive nil)
    ;; core
    (lsp-enable-xref t)
    (lsp-auto-configure nil)
    (lsp-eldoc-enable-hover nil)
    (lsp-enable-dap-auto-configure nil)
    (lsp-enable-file-watchers nil)
    (lsp-enable-folding nil)
    (lsp-enable-imenu nil)
    (lsp-enable-indentation nil)
    (lsp-enable-links nil)
    (lsp-enable-on-type-formatting nil)
    (lsp-enable-suggest-server-download nil)
    (lsp-enable-symbol-highlighting nil)
    (lsp-enable-text-document-color nil)
    ;; completion
    (lsp-completion-enable t)
    (lsp-completion-enable-additional-text-edit nil)
    (lsp-enable-snippet nil)
    (lsp-completion-show-kind nil)
    ;; headerline
    (lsp-headerline-breadcrumb-enable nil)
    (lsp-headerline-breadcrumb-enable-diagnostics nil)
    (lsp-headerline-breadcrumb-enable-symbol-numbers nil)
    (lsp-headerline-breadcrumb-icons-enable nil)
    ;; modeline
    (lsp-modeline-code-actions-enable nil)
    (lsp-modeline-diagnostics-enable nil)
    (lsp-modeline-workspace-status-enable nil)
    (lsp-signature-doc-lines 1)
    ;; lens
    (lsp-lens-enable nil)
    ;; semantic
    (lsp-semantic-tokens-enable nil)
    :init
    (setq lsp-use-plists t))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :config
    (setq lsp-ui-doc-enable nil)
    (setq lsp-ui-doc-header t)
    (setq lsp-ui-doc-include-signature t)
    (setq lsp-ui-doc-border (face-foreground 'default))
    (setq lsp-ui-sideline-show-code-actions t)
    (setq lsp-ui-sideline-delay 0.05))

  (use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
  (use-package lsp-treemacs :commands lsp-treemacs-errors-list)
#+end_src

*** Python
#+begin_src emacs-lisp
  (use-package lsp-pyright
    :ensure t
    :custom (lsp-pyright-langserver-command "pyright") ;; or basedpyright
    :hook (python-mode . (lambda ()
                           (require 'lsp-pyright)
                           (lsp))))  ; or lsp-deferred
#+end_src

Install the pyright server
#+begin_src shell
  pip install pyright
#+end_src
*** Java
#+begin_src emacs-lisp
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
  (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
  (use-package dap-java :ensure nil)

  (use-package dap-mode
    :ensure t
    :config
    (dap-auto-configure-mode)
    (require 'dap-java)
    (dap-register-debug-providers '("java" . dap-java-debug-provider))
    (dap-register-debug-templates
     (list (list :type "java" :name "Java Attach"
                 :request "attach"
                 :host-name "localhost"
                 :port 5005))))
#+end_src

** Debug Adapters
#+begin_src emacs-lisp
  (use-package dape
    :preface
    ;; By default dape shares the same keybinding prefix as `gud'
    ;; If you do not want to use any prefix, set it to nil.
    ;; (setq dape-key-prefix "\C-x\C-a")

    :hook
    ;; Save breakpoints on quit
    ;; (kill-emacs . dape-breakpoint-save)
    ;; Load breakpoints on startup
    ;; (after-init . dape-breakpoint-load)

    :config
    ;; Turn on global bindings for setting breakpoints with mouse
    ;; (dape-breakpoint-global-mode)

    ;; Info buffers to the right
    ;; (setq dape-buffer-window-arrangement 'right)

    ;; Info buffers like gud (gdb-mi)
    ;; (setq dape-buffer-window-arrangement 'gud)
    ;; (setq dape-info-hide-mode-line nil)

    ;; Pulse source line (performance hit)
    ;; (add-hook 'dape-display-source-hook 'pulse-momentary-highlight-one-line)

    ;; Showing inlay hints
    ;; (setq dape-inlay-hints t)

    ;; Save buffers on startup, useful for interpreted languages
    ;; (add-hook 'dape-start-hook (lambda () (save-some-buffers t t)))

    ;; Kill compile buffer on build success
    ;; (add-hook 'dape-compile-hook 'kill-buffer)

    ;; Projectile users
    ;; (setq dape-cwd-function 'projectile-project-root)
    )
#+end_src

*** Python
#+begin_src shell
  pip install debugpy
#+end_src

** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure nil
    :bind (("C-c g" . #'magit-status)))

  ;; (use-package libgit)

  ;; (use-package magit-libgit
  ;;  :after (magit libgit))
#+END_SRC

** Ediff - File comparison
#+begin_src emacs-lisp
  (setq ediff-keep-variants nil)
  (setq ediff-make--buffers-readonly-at-startup nil)
  (setq ediff-merge-revisions-with-ancestor t)
  (setq ediff-show-clashes-only t)
  (setq ediff-split-window-function 'split-window-horizontally)
  (setq ediff-window-setup-function 'ediff-setup-windows-plain)
#+end_src
*** COMMENT 3 way merge setup
From [[https://news.ycombinator.com/item?id=34560604][I basically just slightly modified the code in *ediff-setup-windows-plain-mer...]]
#+begin_src emacs-lisp
  (defun ediff-setup-windows-plain-merge (buf-A buf-B buf-C control-buffer)
    ;; skip dedicated and unsplittable frames
    (ediff-destroy-control-frame control-buffer)
    (let ((window-min-height 1)
          (with-Ancestor-p (with-current-buffer control-buffer
                             ediff-merge-with-ancestor-job))
          split-window-function
          merge-window-share merge-window-lines
          (buf-Ancestor (with-current-buffer control-buffer
                          ediff-ancestor-buffer))
          wind-A wind-B wind-C wind-Ancestor)
      (with-current-buffer control-buffer
        (setq merge-window-share ediff-merge-window-share
              ;; this lets us have local versions of ediff-split-window-function
              split-window-function ediff-split-window-function))
      (delete-other-windows)
      (set-window-dedicated-p (selected-window) nil)
      (split-window-vertically)
      (ediff-select-lowest-window)
      (ediff-setup-control-buffer control-buffer)

      ;; go to the upper window and split it betw A, B, and possibly C
      (other-window 1)
      (setq merge-window-lines
            (max 2 (round (* (window-height) merge-window-share))))
      (switch-to-buffer buf-A)
      (setq wind-A (selected-window))

      (split-window-vertically (max 2 (- (window-height) merge-window-lines)))
      (if (eq (selected-window) wind-A)
          (other-window 1))

      (setq wind-C (selected-window))
      (switch-to-buffer buf-C)

      (select-window wind-A)
      (funcall split-window-function)

      (if (eq (selected-window) wind-A)
          (other-window 1))
      (switch-to-buffer buf-B)
      (setq wind-B (selected-window))

      (when (and ediff-show-ancestor with-Ancestor-p)
        (select-window wind-B)
        (split-window-horizontally)
        (when (eq (selected-window) wind-B)
          (other-window 1))
        (switch-to-buffer buf-Ancestor)
        (setq wind-Ancestor (selected-window)))

      (balance-windows-area)

      (with-current-buffer control-buffer
        (setq ediff-window-A wind-A
              ediff-window-B wind-B
              ediff-window-C wind-C
              ediff-window-Ancestor wind-Ancestor))

      (ediff-select-lowest-window)
      (minimize-window)
      (ediff-setup-control-buffer control-buffer)
      ))
#+end_src
** Syntax Highlighting
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))

  (use-package prism
    :config
    (add-hook 'prog-mode-hook #'prism-mode))

  ;; (use-package rainbow-blocks
  ;;   :config
  ;;   (add-hook 'prog-mode-hook #'rainbow-blocks-mode))

  (use-package rainbow-identifiers
    :config
    (add-hook 'prog-mode-hook #'rainbow-identifiers-mode))
#+end_src

*** Rainbow blocks visual inspection
#+begin_src python
  if name == noname:
      function_call(second_function(third_function(fourth_function(fifth_one(sixth_maybe(seventh_again(eighth_call(nineth_one()))))))))

      if name == nonameagain:
          with enter_one_more as f:
              fine = by me
              if var:
                  var = True
                  if makedirs:
                      temp = dump
#+end_src

*** COMMENT Highlight indentation
#+begin_src emacs-lisp
  (use-package highlight-indentation
    :hook ((prog-mode . highlight-indentation-mode)
           (prog-mode . highlight-indentation-current-column-mode)))
#+end_src

** Code folding
#+begin_src emacs-lisp
  (use-package origami
    :config
    (add-hook 'prog-mode-hook #'origami-mode)
    :bind (:map origami-mode-map
                ("C-<return>" . origami-toggle-node)
                ("C-M-<return>" . origami-toggle-all-nodes)
                ("C-<tab>" . origami-recursively-toggle-node)
                ("C-<iso-lefttab>" . origami-show-only-node)))
#+end_src

** Comint Fold
[[https://github.com/jdtsmith/comint-fold][GitHub - jdtsmith/comint-fold: Fold input + output blocks in Emacs comint shells]]
#+begin_src emacs-lisp
  (use-package comint-fold
    :elpaca (:host github :repo "jdtsmith/comint-fold" :branch "main" :main "comint-fold.el")
    :bind (:map comint-mode-map ("C-<tab>" . #'comint-fold-do-fold))
    :config
    (comint-fold-mode 1)
    (setq comint-fold-remap-tab nil)

    ;; configure some modes specially; try first without this, many "just work"
    (add-hook 'gdb-mode-hook
              (comint-fold-configure-hook 0 (rx bol "(gdb)" (+ space))))
    (add-hook 'ipy-mode-hook
              (comint-fold-configure-hook 1 'ipy-prompt-regexp)))

#+end_src
** COMMENT Minibuffer completion - vertico
#+begin_src emacs-lisp
  ;; Example configuration for Consult
  (use-package consult
    ;; Replace bindings. Lazily loaded by `use-package'.
    :bind (;; C-c bindings in `mode-specific-map'
           ("C-c M-x" . consult-mode-command)
           ("C-c h" . consult-history)
           ("C-c k" . consult-kmacro)
           ("C-c m" . consult-man)
           ("C-c i" . consult-info)
           ([remap Info-search] . consult-info)
           ;; C-x bindings in `ctl-x-map'
           ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
           ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
           ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
           ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
           ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
           ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
           ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
           ;; Custom M-# bindings for fast register access
           ("M-#" . consult-register-load)
           ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
           ("C-M-#" . consult-register)
           ;; Other custom bindings
           ("M-y" . consult-yank-pop)                ;; orig. yank-pop
           ;; M-g bindings in `goto-map'
           ("M-g e" . consult-compile-error)
           ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
           ("M-g g" . consult-goto-line)             ;; orig. goto-line
           ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
           ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
           ("M-g m" . consult-mark)
           ("M-g k" . consult-global-mark)
           ("M-g i" . consult-imenu)
           ("M-g I" . consult-imenu-multi)
           ;; M-s bindings in `search-map'
           ("M-s d" . consult-find)                  ;; Alternative: consult-fd
           ("M-s c" . consult-locate)
           ("M-s g" . consult-grep)
           ("M-s G" . consult-git-grep)
           ("M-s r" . consult-ripgrep)
           ("M-s l" . consult-line)
           ("M-s L" . consult-line-multi)
           ("M-s k" . consult-keep-lines)
           ("M-s u" . consult-focus-lines)
           ;; Isearch integration
           ("M-s e" . consult-isearch-history)
           :map isearch-mode-map
           ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
           ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
           ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
           ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
           ;; Minibuffer history
           :map minibuffer-local-map
           ("M-s" . consult-history)                 ;; orig. next-matching-history-element
           ("M-r" . consult-history))                ;; orig. previous-matching-history-element

    ;; Enable automatic preview at point in the *Completions* buffer. This is
    ;; relevant when you use the default completion UI.
    :hook (completion-list-mode . consult-preview-at-point-mode)

    ;; The :init configuration is always executed (Not lazy)
    :init

    ;; Optionally configure the register formatting. This improves the register
    ;; preview for `consult-register', `consult-register-load',
    ;; `consult-register-store' and the Emacs built-ins.
    (setq register-preview-delay 0.5
          register-preview-function #'consult-register-format)

    ;; Optionally tweak the register preview window.
    ;; This adds thin lines, sorting and hides the mode line of the window.
    (advice-add #'register-preview :override #'consult-register-window)

    ;; Use Consult to select xref locations with preview
    (setq xref-show-xrefs-function #'consult-xref
          xref-show-definitions-function #'consult-xref)

    ;; Configure other variables and modes in the :config section,
    ;; after lazily loading the package.
    :config

    ;; Optionally configure preview. The default value
    ;; is 'any, such that any key triggers the preview.
    ;; (setq consult-preview-key 'any)
    ;; (setq consult-preview-key "M-.")
    ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
    ;; For some commands and buffer sources it is useful to configure the
    ;; :preview-key on a per-command basis using the `consult-customize' macro.
    (consult-customize
     consult-theme :preview-key '(:debounce 0.2 any)
     consult-ripgrep consult-git-grep consult-grep
     consult-bookmark consult-recent-file consult-xref
     consult--source-bookmark consult--source-file-register
     consult--source-recent-file consult--source-project-recent-file
     ;; :preview-key "M-."
     :preview-key '(:debounce 0.4 any))

    ;; Optionally configure the narrowing key.
    ;; Both < and C-+ work reasonably well.
    (setq consult-narrow-key "<") ;; "C-+"

    ;; Optionally make narrowing help available in the minibuffer.
    ;; You may want to use `embark-prefix-help-command' or which-key instead.
    ;; (keymap-set consult-narrow-map (concat consult-narrow-key " ?") #'consult-narrow-help)
    )
#+end_src

** Minibuffer completion - Ivy
#+begin_src emacs-lisp
  ;; Completions with counsel
  (use-package counsel
    :config
    (counsel-mode 1))

  ;; Search better with swiper
  (use-package swiper
    :config
    (counsel-mode 1))

  ;; The interface for swiper/counsel
  (use-package ivy
    :requires (counsel swiper)
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x))

  (use-package prescient
    :config (ivy-prescient-mode))
#+end_src


** Align Non Space
[[https://blog.lambda.cx/posts/emacs-align-columns/][Aligning columns in Emacs]]
#+begin_src emacs-lisp
  (defun align-non-space (BEG END)
    "Align non-space columns in region BEG END."
    (interactive "r")
    (align-regexp BEG END "\\(\\s-*\\)\\S-+" 1 1 t))
#+end_src

** Markdown mode
#+begin_src emacs-lisp
  (use-package markdown-mode)
  (add-to-list 'auto-mode-alist '("\\.mmd\\'" . markdown-mode))
#+end_src

** Shell mode
#+begin_src emacs-lisp :tangle no
  (use-package bash-completion
    :elpaca (:host github :repo "szermatt/emacs-bash-completion")
    :config
    (add-hook 'shell-dynamic-complete-functions 'bash-completion-dynamic-complete))
#+end_src

[[https://magnus.therning.org/2023-11-19-making-emacs-without-terminal-emulator-a-little-more-usable.html][Making Emacs without terminal emulator a little more usable]]
#+begin_src emacs-lisp
  (defun mep-projectile-async-shell-command ()
    "Run `async-shell-command' in the current project's root directory."
    (declare (interactive-only async-shell-command))
    (interactive)
    (let ((default-directory (projectile-project-root)))
      (call-interactively #'async-shell-command)))
#+end_src

** COMMENT Emacs Jupyter Notebook
#+begin_src emacs-lisp
  (use-package jupyter)
  (setq ob-async-no-async-languages-alist '("jupyter-python" "jupyter-julia"))
#+end_src

** Code-cell
code-cells and Jupytext
#+begin_src sh
  pip install jupyterlab jupytext
#+end_src
#+begin_src emacs-lisp
  (use-package code-cells
    :config
    (setq code-cells-convert-ipynb-style '(("pandoc" "--to" "ipynb" "--from" "org")
                                           ("pandoc" "--to" "org" "--from" "ipynb")
                                           (lambda () #'org-mode))))
#+end_src
** LLM and AI coding
#+begin_src emacs-lisp
  (defun read-api-key (file-path)
    "Read the first line of FILE-PATH and return it as a string with no trailing newline."
    (with-temp-buffer
      (insert-file-contents file-path)
      (string-trim (buffer-substring-no-properties (point-min) (line-end-position)))))

  (defun va/get-openrouter-api-key ()
    (read-api-key "~/keys/openrouter/aideremacs.txt"))

  (use-package aidermacs
    :bind (("C-c M-a" . aidermacs-transient-menu))
    :config
                                          ; Set API_KEY in .bashrc, that will automatically picked up by aider or in elisp
    ;;(setenv "ANTHROPIC_API_KEY" "sk-...")
                                          ; defun my-get-openrouter-api-key yourself elsewhere for security reasons
    (setenv "OPENROUTER_API_KEY" (va/get-openrouter-api-key))
    :custom
                                          ; See the Configuration section below
    (aidermacs-use-architect-mode t)
    (aidermacs-default-model "openrouter/openai/o3-mini"))
#+end_src

#+begin_src emacs-lisp
  (use-package gptel
    :config (gptel-make-openai "OpenRouter"
              :host "openrouter.ai"
              :endpoint "/api/v1/chat/completions"
              :stream t
              :key (va/get-openrouter-api-key)
              :models '(openai/gpt-3.5-turbo
                        mistralai/mixtral-8x7b-instruct
                        meta-llama/codellama-34b-instruct
                        codellama/codellama-70b-instruct
                        google/palm-2-codechat-bison-32k
                        google/gemini-2.5-pro)))
#+end_src

* Reading and Writing
** Distraction Free Editing
#+begin_src emacs-lisp
  ;; Distraction-free screen
  (use-package olivetti
    :init
    (setq olivetti-body-width .5)
    :config
    (defun distraction-free ()
      "Distraction-free writing environment"
      (interactive)
      (if (equal olivetti-mode nil)
          (progn
            (window-configuration-to-register 1)
            (delete-other-windows)
            (text-scale-increase 2)
            (olivetti-mode t))
        (progn
          (jump-to-register 1)
          (olivetti-mode 0)
          (text-scale-decrease 2))))
    :bind
    (("<f9>" . distraction-free)))
#+end_src

** Reading
*** Org-noter
#+begin_src emacs-lisp
  (use-package org-noter)
#+end_src

*** Nov.el
#+begin_src emacs-lisp
  (defun my-nov-font-setup ()
    (face-remap-add-relative 'variable-pitch :family "ETBembo"
                             :height 1.0))
  (add-hook 'nov-mode-hook 'my-nov-font-setup)
  (use-package nov
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
    (setq nov-text-width 80))

  (use-package nov-xwidget
    :demand t
    :elpaca (:host github :repo "chenyanming/nov-xwidget")
    :after nov
    :config
    (define-key nov-mode-map (kbd "o") 'nov-xwidget-view)
    (add-hook 'nov-mode-hook 'nov-xwidget-inject-all-files))
#+end_src

*** COMMENT more config
#+begin_src emacs-lisp
  (use-package justify-kp)

  (setq nov-text-width t)

  (defun my-nov-window-configuration-change-hook ()
    (my-nov-post-html-render-hook)
    (remove-hook 'window-configuration-change-hook
                 'my-nov-window-configuration-change-hook
                 t))

  (defun my-nov-post-html-render-hook ()
    (if (get-buffer-window)
        (let ((max-width (pj-line-width))
              buffer-read-only)
          (save-excursion
            (goto-char (point-min))
            (while (not (eobp))
              (when (not (looking-at "^[[:space:]]*$"))
                (goto-char (line-end-position))
                (when (> (shr-pixel-column) max-width)
                  (goto-char (line-beginning-position))
                  (pj-justify)))
              (forward-line 1))))
      (add-hook 'window-configuration-change-hook
                'my-nov-window-configuration-change-hook
                nil t)))

  (add-hook 'nov-post-html-render-hook 'my-nov-post-html-render-hook)

#+end_src

*** Dictionary
#+begin_src emacs-lisp
  (use-package dictionary
    :defer
    :ensure nil
    :bind (:map text-mode-map
                ("M-." . dictionary-lookup-definition)
                :map org-mode-map
                ("M-." . dictionary-lookup-definition))
    :init
    (add-to-list 'display-buffer-alist
                 '("^\\*Dictionary\\*" display-buffer-in-side-window
                   (side . left)
                   (window-width . 50)))
    :custom
    (dictionary-server "dict.org"))
#+end_src

** Writing
*** Spellcheck
#+begin_src emacs-lisp
  (use-package flyspell
    :ensure nil
    :config
    (setenv  "DICTIONARY"  "en_US")
    (setenv  "DICTPATH"  (concat (getenv "HOME") "/.dictionaries"))
    (setq   ispell-program-name  "/usr/local/bin/hunspell")

    (setq ispell-program-name "hunspell"
          ispell-default-dictionary "en_US")
    :hook (text-mode . flyspell-mode)
    :bind (("M-<f7>" . flyspell-buffer)
           ("<f7>" . flyspell-word)
           ("C-;" . flyspell-auto-correct-previous-word)))
#+end_src

*** Latex Equation Previews
- org-format-latex-options - [[https://emacs.stackexchange.com/questions/19880/font-size-control-of-latex-previews-in-org-files][org mode - Font size control of LateX previews in Org files]]
#+begin_src emacs-lisp
  (use-package org-fragtog
    :config (add-hook 'org-mode-hook 'org-fragtog-mode))
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src

** Latex and pdf-tools
#+begin_src emacs-lisp
  (use-package auctex
    :ensure nil)

  (use-package cdlatex
    :ensure nil
    :config
    (add-hook 'org-mode-hook 'org-cdlatex-mode)
    (add-hook 'LaTeX-mode-hook #'turn-on-cdlatex)
    (add-hook 'latex-mode-hook #'turn-on-cdlatex))

  (use-package pdf-tools
    :pin manual
    :config
    (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-width)
    (define-key pdf-view-mode-map (kbd "C-s") 'isearch-forward)
    :custom
    (pdf-annot-activate-created-annotations t "automatically annotate highlights"))

  (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
        TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
        TeX-source-correlate-start-server t)

  (add-hook 'TeX-after-compilation-finished-functions
            #'TeX-revert-document-buffer)

  (add-hook 'pdf-view-mode-hook (lambda() (linum-mode -1)))

  (set-default 'preview-scale-function 1.2)

  ;; from https://karthinks.com/software/scaling-latex-previews-in-emacs/
  ;; (setq org-preview-latex-default-process 'dvisvgm)
  (defun my/text-scale-adjust-latex-previews ()
    "Adjust the size of latex preview fragments when changing the
  buffer's text scale."
    (pcase major-mode
      ('latex-mode
       (dolist (ov (overlays-in (point-min) (point-max)))
         (if (eq (overlay-get ov 'category)
                 'preview-overlay)
             (my/text-scale--resize-fragment ov))))
      ('org-mode
       (dolist (ov (overlays-in (point-min) (point-max)))
         (if (eq (overlay-get ov 'org-overlay-type)
                 'org-latex-overlay)
             (my/text-scale--resize-fragment ov))))))

  (defun my/text-scale--resize-fragment (ov)
    (overlay-put
     ov 'display
     (cons 'image
           (plist-put
            (cdr (overlay-get ov 'display))
            :scale (+ 1.0 (* 0.25 text-scale-mode-amount))))))

  (add-hook 'text-scale-mode-hook #'my/text-scale-adjust-latex-previews)
#+end_src

** Screencast
#+begin_src emacs-lisp
  (use-package gif-screencast
    :config
    (setq gif-screencast-program "/home/vanangamudi/.scripts/sway-contrib/grimshot")
    gif-screencast-args '("savecopy area"))
  (global-set-key (kbd "<f8>") 'gif-screencast-start-or-stop)
#+end_src

#+RESULTS:
: gif-screencast-start-or-stop

* Communication

** IRC chat
#+begin_src emacs-lisp
  (setq erc-server "irc.libera.chat"
        erc-nick "vanangamudi"
        erc-user-full-name "vanangamudi"
        erc-track-shorten-start 8
        erc-autojoin-channels-alist '(("irc.libera.chat" "#emacs"))
        erc-kill-buffer-on-part t
        erc-join-buffer 'window
        erc-auto-query 'window)
#+end_src

** COMMENT Matrix client
#+begin_src emacs-lisp
  (use-package ement
    :elpaca (:host github :repo "alphapapa/ement.el"))
#+end_src

** Email with mu4e

*** Configure =mbsync= using =.mbsyncrc=
#+begin_src conf :tangle ~/aalar/.mbsyncrc
  IMAPAccount personal-gmail
  Host imap.gmail.com
  User selva.personals@gmail.com
  PassCmd "cat ~/ko-pa-ni/thani/kadavu/mbsync.karunthulai.selva.personals.txt"
  SSLType IMAPS
  CertificateFile /etc/ssl/certs/ca-certificates.crt
  PipelineDepth 1

  IMAPStore personal-gmail-remote
  Account personal-gmail

  MaildirStore personal-gmail-local
  Subfolders Verbatim
  Path ~/mail/personal-gmail/
  Inbox ~/mail/personal-gmail/Inbox

  Channel personal-gmail
  Master :personal-gmail-remote:
  Slave :personal-gmail-local:
  Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail" "[Gmail]/Trash"
  Create Both
  SyncState *


  IMAPAccount developer-gmail
  Host imap.gmail.com
  User selva.developer@gmail.com
  PassCmd "cat ~/ko-pa-ni/thani/kadavu/mbsync.karunthulai.selva.developer.txt"
  SSLType IMAPS
  CertificateFile /etc/ssl/certs/ca-certificates.crt
  PipelineDepth 1

  IMAPStore developer-gmail-remote
  Account developer-gmail

  MaildirStore developer-gmail-local
  Subfolders Verbatim
  Path ~/mail/developer-gmail/
  Inbox ~/mail/developer-gmail/Inbox

  Channel developer-gmail
  Master :developer-gmail-remote:
  Slave :developer-gmail-local:
  Patterns * ![Gmail]* "[Gmail]/Sent Mail" "[Gmail]/Starred" "[Gmail]/All Mail" "[Gmail]/Trash"
  Create Both
  SyncState *
#+end_src
*** notmuch
#+begin_src emacs-lisp
  (use-package notmuch
    :defer t
    :config
    (setq notmuch-search-oldest-first nil))
#+end_src

*** COMMENT mu4e
****  Load mu4e
#+begin_src emacs-lisp
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")
#+end_src

**** Install =mu4e= for =mu= and =mu4e= and install =isync= packages for =mbsync=
#+begin_src bash :results output code
  sudo apt install mu4e isync
#+end_src

**** Configure mu4e
#+begin_src emacs-lisp
  (setq message-send-mail-function 'smtpmail-send-it)
  (setq mu4e-compose-context-policy 'ask-if-none)
  (setq mu4e-compose-format-flowed t)
#+end_src

#+begin_src emacs-lisp
  (use-package mu4e
    :ensure nil
    :load-path "/usr/share/emacs/site-lisp/mu4e/"
    ;; :defer 20 ; Wait until 20 seconds after startup
    :config

    ;; This is set to 't' to avoid mail syncing issues when using mbsync
    (setq mu4e-change-filenames-when-moving t)

    ;; Refresh mail using isync every 10 minutes
    (setq mu4e-update-interval (* 10 60))
    (setq mu4e-get-mail-command "mbsync -a")
    (setq mu4e-maildir "~/mail/")

    (setq mu4e-contexts
          (list
           ;; gmail-profession
           (make-mu4e-context
            :name "profession"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/gmail-profession" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "selva.on.profession@gmail.com")
                    (user-full-name    . "Selvakumar Murugan")
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-drafts-folder  . "/gmail-profession/[Gmail]/Drafts")
                    (mu4e-sent-folder  . "/gmail-profession/[Gmail]/Sent Mail")
                    (mu4e-refile-folder  . "/gmail-profession/[Gmail]/All Mail")
                    (mu4e-trash-folder  . "/gmail-profession/[Gmail]/Trash")))

           ;; personals account
           (make-mu4e-context
            :name "personal"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/personal-gmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "selva.personal@gmail.com")
                    (user-full-name    . "Selvakumar Murugan")
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-drafts-folder  . "/personal-gmail/[Gmail]/Drafts")
                    (mu4e-sent-folder  . "/personal-gmail/[Gmail]/Sent Mail")
                    (mu4e-refile-folder  . "/personal-gmail/[Gmail]/All Mail")
                    (mu4e-trash-folder  . "/personal-gmail/[Gmail]/Trash")))

           ;; developer account
           (make-mu4e-context
            :name "developer"
            :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/developer-gmail" (mu4e-message-field msg :maildir))))
            :vars '((user-mail-address . "selva.developer@gmail.com")
                    (user-full-name    . "Selvakumar Murugan")
                    (smtpmail-smtp-server  . "smtp.gmail.com")
                    (smtpmail-smtp-service . 465)
                    (smtpmail-stream-type  . ssl)
                    (mu4e-drafts-folder  . "/developer-gmail/[Gmail]/Drafts")
                    (mu4e-sent-folder  . "/developer-gmail/[Gmail]/Sent Mail")
                    (mu4e-refile-folder  . "/developer-gmail/[Gmail]/All Mail")
                    (mu4e-trash-folder  . "/developer-gmail/[Gmail]/Trash")))

           ))

    (setq mu4e-maildir-shortcuts
          '(("/Inbox"             . ?i)
            ("/[Gmail]/Sent Mail" . ?s)
            ("/[Gmail]/Trash"     . ?t)
            ("/[Gmail]/Drafts"    . ?d)
            ("/[Gmail]/All Mail"  . ?a))))

#+end_src
** Telegram
#+begin_src emacs-lisp
  (use-package telega
    :commands (telega))
#+end_src

* Elfeed-org
** Installation
*** Download elfeed-org
#+BEGIN_SRC bash
  cd ~/.emacs.d/lisp
  #wget https://github.com/remyhonig/elfeed-org/blob/master/elfeed-org.el
  wget https://raw.githubusercontent.com/remyhonig/elfeed-org/master/elfeed-org.el
#+END_SRC

*** Install the package in Emacs
#+BEGIN_SRC text
  C-x C-f ~/.emacs.d/lisp/elfeed-org.el <ENTER>
  M-x package-install-from-buffer <ENTER>
#+END_SRC

*** elfeed-db store
[[https://github.com/vanangamudi/elfeed-db/][My elfeed-db repo]]
Clone and map =elfeed-db= to  =~/.elfeed= directory
#+begin_src bash
  cd ~/emacs/
  git clone git@github.com:vanangamudi/elfeed-db.git
  ln -s ~/aalar/emacs/elfeed ~/.elfeed
#+end_src

*** Elfeed config
#+BEGIN_SRC emacs-lisp
  (use-package elfeed)
  ;; Load elfeed-org
  (use-package elfeed-org
    :init (elfeed-org))

  ;; Initialize elfeed-org
  ;; This hooks up elfeed-org to read the configuration when elfeed
  ;; is started with =M-x elfeed=
  ;; (elfeed-org)
  ;; Optionally specify a number of files containing elfeed
  ;; configuration. If not set then the location below is used.
  ;; Note: The customize interface is also supported.
  (setq rmh-elfeed-org-files (list "~/emacs/elfeed-db/elfeed.org"))

  (use-package elfeed-tube
    :after elfeed
    :demand t
    :config
    ;; (setq elfeed-tube-auto-save-p nil) ; default value
    ;; (setq elfeed-tube-auto-fetch-p t)  ; default value
    (elfeed-tube-setup)

    :bind (:map elfeed-show-mode-map
                ("F" . elfeed-tube-fetch)
                ([remap save-buffer] . elfeed-tube-save)
                :map elfeed-search-mode-map
                ("F" . elfeed-tube-fetch)
                ([remap save-buffer] . elfeed-tube-save)))

  (use-package elfeed-tube-mpv
    :bind (:map elfeed-show-mode-map
                ("C-c C-f" . elfeed-tube-mpv-follow-mode)
                ("C-c C-w" . elfeed-tube-mpv-where)))

  (setq elfeed-tube-auto-save-p nil)
  (setq elfeed-tube-auto-fetch-p nil)
  (setq elfeed-tube-captions-languages
        '("en" "english (auto generated)"))
#+END_SRC

* Emacs Everywhere
** Daemon and Emacsclient
#+begin_src sh :tangle ~/.local/bin/EDITOR :tangle-mode (identity #o744)
  #!/bin/sh
  exec emacsclient -F "((left . 0) (top . 0))" -c -n "$@"
#+end_src

** COMMENT Edit with Emacs
#+begin_src emacs-lisp
  (use-package edit-server
    :commands edit-server-start
    :init (if after-init-time
              (edit-server-start)
            (add-hook 'after-init-hook
                      #'(lambda() (edit-server-start))))
    :config (setq edit-server-new-frame-alist
                  '((name . "Edit with Emacs FRAME")
                    (top . 200)
                    (left . 200)
                    (width . 80)
                    (height . 25)
                    (minibuffer . t)
                    (menu-bar-lines . t)
                    (window-system . x))))
#+end_src

** GhostText
Inspired by [[https://github.com/stsquad/emacs_chrome][GitHub - stsquad/emacs_chrome]]
- browser side: [[https://github.com/fregante/GhostText][GitHub - fregante/GhostText: 👻 Use your text editor to write in your browser]]
- emacs-side:

#+begin_src emacs-lisp
  (use-package atomic-chrome
    :config
    (setq atomic-chrome-buffer-open-style 'frame)
    (setq atomic-chrome-default-major-mode 'python-mode)
    :init (atomic-chrome-start-server))
#+end_src

** Yequake
The =yequake-org-capture= function is suitable for use in a Yequake frame used for Org Capture. It calls =org-capture= and sets =org-capture-after-finalize-hook= to close the Yequake frame after the capture is finalized or canceled. (Note that if another Yequake frame is toggled before the capture is finalized, when the capture is finalized, the wrong Yequake frame will be toggled.) For example, with this configuration:
#+begin_src emacs-lisp
  (use-package yequake
    ;;:quelpa (yequake :fetcher github :repo "alphapapa/yequake")

    :custom
    (yequake-frames
     '(("org-capture"
        (buffer-fns . (yequake-org-capture))
        (width . 0.75)
        (height . 0.5)
        (alpha . 0.95)
        (frame-parameters . ((undecorated . t)
                             (skip-taskbar . t)
                             (sticky . t)))))))
#+end_src

You could then run:
#+begin_src sh
  emacsclient -n -e '(yequake-toggle "org-capture")'
#+end_src

And after the capture is finalized or canceled, the frame will be closed.

** Install the following packages
#+begin_src bash  :dir /sudo::  :results output
  apt-get install xclip xdotool xbindkeys #xprop xwininfo
#+end_src

** Config
#+begin_src emacs-lisp
  (use-package emacs-everywhere)
#+end_src

* Media
** EMMS
#+begin_src emacs-lisp
  (use-package emms-setup
       :ensure nil
       :init
       (add-hook 'emms-player-started-hook 'emms-show)
       :config
       (setq emms-show-format "Playing: %s")
       (emms-all)
       (emms-default-players)
       (setq emms-source-file-default-directory "~/music/"))
#+end_src

** Org Music
#+begin_src emacs-lisp
(use-package org-music
  :elpaca (:host github :repo "debanjum/org-music")
  :after (org emms)
  :init (progn
          (setq
           org-music-file "~/org/isai.org"
           org-music-media-directory "~/ko-pa-ni/isai/"
           org-music-operating-system "linux")
          (add-hook
           'org-mode-hook
           (lambda()
             (if (equal buffer-file-name (expand-file-name org-music-file))
                 (org-music-mode))))))
#+end_src

** mpv
#+begin_src bash :tangle ~/.config/mpv/mpv.conf
  # Guide:
  # https://mpv.io/manual/stable/#configuration-files
  # Use GPU-accelerated video output by default.
  vo=gpu
  # Use quotes for text that can contain spaces:
  term-status-msg="Time: ${time-pos}"
  screenshot-directory="~/Pictures/mpv"
#+end_src

#+begin_src emacs-lisp
  (use-package mpv)

  ;; to address Failed to connect to mpv error
  (setq mpv-start-timeout 5)

  (global-set-key (kbd "C-<f1> p") 'mpv-play)
  (global-set-key (kbd "C-<f1> T") 'mpv-toggle-video)
  (global-set-key (kbd "C-<f1> t") 'elfeed-tube-mpv)

  ;; START from: https://github.com/NapoleonWils0n/cerberus/blob/master/emacs/mpv-timer.org
  ;; frame step forward
  (with-eval-after-load 'mpv
    (defun mpv-frame-step ()
      "Step one frame forward."
      (interactive)
      (mpv--enqueue '("frame-step") #'ignore)))


  ;; frame step backward
  (with-eval-after-load 'mpv
    (defun mpv-frame-back-step ()
      "Step one frame backward."
      (interactive)
      (mpv--enqueue '("frame-back-step") #'ignore)))


  ;; mpv take a screenshot
  (with-eval-after-load 'mpv
    (defun mpv-screenshot ()
      "Take a screenshot"
      (interactive)
      (mpv--enqueue '("screenshot") #'ignore)))


  ;; mpv show osd
  (with-eval-after-load 'mpv
    (defun mpv-osd ()
      "Show the osd"
      (interactive)
      (mpv--enqueue '("set_property" "osd-level" "3") #'ignore)))


  (defhydra hydra-mpv (global-map "<M-S-f5 >")
    "
    ^Seek^                    ^Actions^                ^General^
    ^^^^^^^^---------------------------------------------------------------------------
    _h_: seek back -5         _,_: back frame          _i_: insert playback position
    _j_: seek back -60        _._: forward frame       _n_: insert a newline
    _k_: seek forward 60      _SPC_: pause             _s_: take a screenshot
    _l_: seek forward 5       _q_: quit mpv            _o_: show the osd
    ^
    "
    ("h" mpv-seek-backward "-5")
    ("j" mpv-seek-backward "-60")
    ("k" mpv-seek-forward "60")
    ("l" mpv-seek-forward "5")
    ("," mpv-frame-back-step)
    ("." mpv-frame-step)
    ("SPC" mpv-pause)
    ("q" mpv-kill)
    ("s" mpv-screenshot)
    ("i" my/mpv-insert-playback-position)
    ("o" mpv-osd)
    ("n" end-of-line-and-indented-new-line))
  ;; END : https://github.com/NapoleonWils0n/cerberus/blob/master/emacs/mpv-timer.org
#+end_src

*** COMMENT Ytel - Youtube client for emacs
#+begin_src emacs-lisp
  (use-package ytel-show
    :after ytel
    :bind (:map ytel-mode-map ("RET" . ytel-show)))
#+end_src
** Bongo Music Player
#+begin_src emacs-lisp
  (use-package bongo
    :config
    (setq-default bongo-enabled-backends '(mpv))
    (setq bongo-custom-backend-matchers
          '((mpv local-file "m4b")
            (ignore local-file "ignore"))))
#+end_src
*** COMMENT hook
#+begin_src emacs-lisp
  (add-hook 'dired-mode-hook
            (lambda ()
              (setq cur dired-directory)
              (cond ((string= cur "/mnt/D/music") (bongo-dired-library-mode))
                    (t "default"))))
#+end_src

** Subed subtitle editor
needs to imported from nongnu elpa. add the following to init.el
#+begin_src emacs-lisp :tangle no
  (add-to-list 'package-archives '("nongnu" . "https://elpa.nongnu.org/nongnu/"))
#+end_src

#+begin_src emacs-lisp
  (use-package subed
    :elpaca (:host github :repo "sachac/subed" :branch "main")
    :config
    ;; Disable automatic movement of point by default
    (add-hook 'subed-mode-hook 'subed-disable-sync-point-to-player)
    ;; Remember cursor position between sessions
    (add-hook 'subed-mode-hook 'save-place-local-mode)
    ;; Break lines automatically while typing
    (add-hook 'subed-mode-hook 'turn-on-auto-fill)
    ;; Break lines at 40 characters
    (add-hook 'subed-mode-hook (lambda () (setq-local fill-column 40))))
#+end_src

* Maps
#+begin_src emacs-lisp
  (use-package osm
    :bind ("M-S-m" . osm-prefix-map) ;; Alternatives: `osm-home' or `osm'

    :custom
    ;; Take a look at the customization group `osm' for more options.
    (osm-server 'default) ;; Configure the tile server
    (osm-copyright t)     ;; Display the copyright information

    :config

    ;; Add custom servers, see also https://github.com/minad/osm/wiki
    ;; (osm-add-server 'myserver
    ;;   :name "My tile server"
    ;;   :group "Custom"
    ;;   :description "Tiles based on aerial images"
    ;;   :url "https://myserver/tiles/%z/%x/%y.png?apikey=%k")
    )
#+end_src

* Torrent Client - Transmission
#+begin_src emacs-lisp
  (use-package transmission)
#+end_src
* Absolute lasts
** Very Large Files
#+begin_src emacs-lisp
  (require 'vlf-setup)
  ;;(custom-set-variables
  ;; '(vlf-application 'dont-ask))
#+end_src

* Custom Variables
Custom set variables are moved here from =init.el= where they were placed automatically by certain packages like =vlf-setup=
#+begin_src emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(fci-rule-color "#14151E")
   '(inhibit-startup-screen t)
   '(vc-annotate-very-old-color nil)
   '(warning-suppress-log-types '((comp))))

  (custom-set-faces
   ;; custom-set-faces was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
    '(org-link ((t (:inherit link :family "Noto Sans CJK KR"))))
   '(variable-pitch ((t (:family "Noto Serif CJK KR")))))
#+end_src
* COMMENT Deprecated
** Slime for common-lisp
Clone [[https://github.com/slime/slime.git][Slime repository]] into ~/code/cloned/slime and add to load path
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/code/commonlisp/slime/")
  (use-package slime
    :init
    (setq inferior-lisp-program "sbcl")
    :config
    (slime-setup)
    ;;(slime-setup '(slime-fancy slime-company))
    :hook
    ;;(slime-mode . slime-company)
    (slime-mode . (lambda ()
                    (load (expand-file-name "/home/vanangamudi/quicklisp/slime-helper.el"))
                    (add-to-list 'slime-contribs 'slime-fancy)
                    (add-to-list 'slime-contribs 'inferior-slime))))

  (use-package paredit)
  (defun override-slime-del-key ()
    (define-key slime-repl-mode-map
                (read-kbd-macro paredit-backward-delete-key) nil))
  (add-hook 'slime-repl-mode-hook 'override-slime-del-key)
#+end_src

* Notes
** Difference between visual-line-mode and auto-fill-mode
auto-fill-mode breaks sentence introducing line-breaks, or newline after a certain number of characters. Visual line mode does not alter the number of lines but only visually wraps text so that it is easier to look at
** [[https://www.masteringemacs.org/article/speed-up-emacs-libjansson-native-elisp-compilation][Speed up Emacs with libjansson and native elisp compilation - Mastering Emacs]]

The whole process may take a while. Native compilation is, as of Emacs 28.1, automatic, and runs in the background. There is nothing for you to do to make it work as it will compile stuff in the background while you’re using Emacs.

To test that both the fast JSON and native compilation is working you can evaluate the following elisp in Emacs:

#+begin_src emacs-lisp
  (if (and (fboundp 'native-comp-available-p)
           (native-comp-available-p))
      (message "Native compilation is available")
    (message "Native complation is *not* available"))
#+end_src

And for the JSON:

#+begin_src emacs-lisp
  (if (functionp 'json-serialize)
      (message "Native JSON is available")
    (message "Native JSON is *not* available"))
#+end_src

And.. that’s that. Enjoy your souped-up Emacs.
